<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>crazy_cloud&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-28T08:48:09.176Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>crazy_cloud</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TopCoder SRM679 Div1 RedAndBluePoints</title>
    <link href="http://yoursite.com/2017/12/26/topcoder-srm679-round1-div1-B/"/>
    <id>http://yoursite.com/2017/12/26/topcoder-srm679-round1-div1-B/</id>
    <published>2017-12-26T12:39:24.000Z</published>
    <updated>2017-12-28T08:48:09.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>二维平面上有$n$个蓝点和$m$个红点。你要画出一个凸多边形，使其在不包含任何红点的同时包含尽可能多的蓝点。请输出最多包含的蓝点数。<br>这个凸多边形可以退化成点或线段。</p><p>$1\leq n,m\leq 50$<br>坐标都是$[0,10^3]$的整数，保证没有两点重叠和三点共线。<br><a id="more"></a></p><hr><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>和求凸包一样，我们先把所有点按照$x$坐标排序，然后将凸多边形分成上下两个凸壳。考虑通过一个个地扩展三角形的方式来得到这两个凸壳再合并。<br>我们使用$O(n^3(n+m))$的时间来预处理任意三个蓝点围成的三角形内是否存在红点以及有多少个蓝点。<br>然后我们令$f_{i,j,k}$表示从点$i$出发的上凸壳，目前最后一个点是$j$，上一个点是$k$的情况下能够包含的最多的蓝点数目。<br>同理用$g_{i,j,k}$来表示下凸壳对应的内容。<br>这个很好转移，只需要枚举一个满足凸性的点就好了，然后利用预处理的值计算就好了。<br>最后合并上下凸壳也很方便，枚举左右顶点合并。还有就是dp计算过程中始终要保证三个点能够形成上/下凸壳。<br>时间复杂度$O(n^3(n+m))$。</p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>达成成就，第一次在TC上做题。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">line</span> 7 <span class="meta-string">"RedAndBluePoints.cpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">55</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x?(x&gt;<span class="number">0</span>?<span class="number">1</span>:<span class="number">-1</span>):<span class="number">0</span>;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> x,y;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="title">P</span><span class="params">(<span class="keyword">int</span> x_=<span class="number">0</span>,<span class="keyword">int</span> y_=<span class="number">0</span>)</span></span>&#123;x=x_,y=y_;&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(P <span class="keyword">const</span> p)<span class="keyword">const</span>&#123;<span class="keyword">return</span> x&lt;p.x||x==p.x&amp;&amp;y&gt;p.y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> P <span class="keyword">operator</span>+(P <span class="keyword">const</span> p)<span class="keyword">const</span>&#123;<span class="keyword">return</span> P(x+p.x,y+p.y);&#125;</div><div class="line"><span class="keyword">inline</span> P <span class="keyword">operator</span>-(P <span class="keyword">const</span> p)<span class="keyword">const</span>&#123;<span class="keyword">return</span> P(x-p.x,y-p.y);&#125;</div><div class="line"><span class="keyword">inline</span> P <span class="keyword">operator</span>*(<span class="keyword">int</span> <span class="keyword">const</span> k)<span class="keyword">const</span>&#123;<span class="keyword">return</span> P(x*k,y*k);&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="keyword">operator</span>*(P <span class="keyword">const</span> p)<span class="keyword">const</span>&#123;<span class="keyword">return</span> x*p.x+y*p.y;&#125;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="keyword">operator</span>^(P <span class="keyword">const</span> p)<span class="keyword">const</span>&#123;<span class="keyword">return</span> x*p.y-y*p.x;&#125;</div><div class="line">&#125;blue[N],red[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">in_triangle</span><span class="params">(P p,P a,P b,P c)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">(</div><div class="line">sgn((c-a)^(p-a))*sgn((b-a)^(p-a))&lt;=<span class="number">0</span></div><div class="line">&amp;&amp;sgn((a-b)^(p-b))*sgn((c-b)^(p-b))&lt;=<span class="number">0</span></div><div class="line">&amp;&amp;sgn((b-c)^(p-c))*sgn((a-c)^(p-c))&lt;=<span class="number">0</span></div><div class="line">);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt[N][N][N],f[N][N][N],g[N][N][N];</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123;x=x&gt;y?x:y;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedAndBluePoints</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; blueX, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; blueY, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; redX, <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; redY)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt),<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f),<span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);</div><div class="line">n=blueX.size(),m=redX.size();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) blue[i+<span class="number">1</span>]=P(blueX[i],blueY[i]);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i) red[i+<span class="number">1</span>]=P(redX[i],redY[i]);</div><div class="line">sort(blue+<span class="number">1</span>,blue+<span class="number">1</span>+n);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</div><div class="line"><span class="keyword">if</span> (i!=j) <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;++k)</div><div class="line"><span class="keyword">if</span> (i!=k&amp;&amp;j!=k)</div><div class="line">&#123;</div><div class="line">cnt[i][j][k]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">1</span>;~cnt[i][j][k]&amp;&amp;l&lt;=m;++l)</div><div class="line"><span class="keyword">if</span> (in_triangle(red[l],blue[i],blue[j],blue[k])) cnt[i][j][k]=<span class="number">-1</span>;</div><div class="line"><span class="keyword">if</span> (~cnt[i][j][k])</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=n;++l)</div><div class="line"><span class="keyword">if</span> (in_triangle(blue[l],blue[i],blue[j],blue[k])) ++cnt[i][j][k];</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;=n;++j)</div><div class="line">&#123;</div><div class="line">f[i][j][i]=g[i][j][i]=<span class="number">2</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=i+<span class="number">1</span>;k&lt;j;++k)</div><div class="line"><span class="keyword">if</span> (sgn((blue[j]-blue[i])^(blue[k]-blue[i]))&lt;<span class="number">0</span>) f[i][j][k]=-n*n;</div><div class="line"><span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> l=i;l&lt;k;++l) <span class="keyword">if</span> (~cnt[i][j][k]&amp;&amp;sgn((blue[j]-blue[k])^(blue[k]-blue[l]))&gt;<span class="number">0</span>) update(f[i][j][k],f[i][k][l]+cnt[i][j][k]<span class="number">-2</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=i+<span class="number">1</span>;k&lt;j;++k)</div><div class="line"><span class="keyword">if</span> (sgn((blue[j]-blue[i])^(blue[k]-blue[i]))&gt;<span class="number">0</span>) g[i][j][k]=-n*n;</div><div class="line"><span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> l=i;l&lt;k;++l) <span class="keyword">if</span> (~cnt[i][j][k]&amp;&amp;sgn((blue[k]-blue[l])^(blue[j]-blue[k]))&gt;<span class="number">0</span>) update(g[i][j][k],g[i][k][l]+cnt[i][j][k]<span class="number">-2</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ret=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a=i;a&lt;=n;++a)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b=i;b&lt;=n;++b)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=max(a,b)+<span class="number">1</span>;j&lt;=n;++j)</div><div class="line"><span class="keyword">if</span> (sgn((blue[j]-blue[i])^(blue[a]-blue[i]))&gt;=<span class="number">0</span>&amp;&amp;sgn((blue[j]-blue[i])^(blue[b]-blue[i]))&lt;=<span class="number">0</span>)</div><div class="line">update(ret,f[i][j][a]+g[i][j][b]<span class="number">-2</span>);</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;二维平面上有$n$个蓝点和$m$个红点。你要画出一个凸多边形，使其在不包含任何红点的同时包含尽可能多的蓝点。请输出最多包含的蓝点数。&lt;br&gt;这个凸多边形可以退化成点或线段。&lt;/p&gt;
&lt;p&gt;$1\leq n,m\leq 50$&lt;br&gt;坐标都是$[0,10^3]$的整数，保证没有两点重叠和三点共线。&lt;br&gt;
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="普通动态规划" scheme="http://yoursite.com/tags/%E6%99%AE%E9%80%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="计算几何" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
      <category term="TopCoder" scheme="http://yoursite.com/tags/TopCoder/"/>
    
      <category term="预处理" scheme="http://yoursite.com/tags/%E9%A2%84%E5%A4%84%E7%90%86/"/>
    
      <category term="凸包" scheme="http://yoursite.com/tags/%E5%87%B8%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>CS Academy Round 38 Parallel Lines</title>
    <link href="http://yoursite.com/2017/11/14/csa38-parallel-lines/"/>
    <id>http://yoursite.com/2017/11/14/csa38-parallel-lines/</id>
    <published>2017-11-14T14:19:33.000Z</published>
    <updated>2017-11-14T14:40:08.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定平面上的$n$个点，请使用最少的互相平行的直线覆盖所有的点。<br>保证答案$K$不超过$400$。</p><p>$1\leq n\leq 3\times10^4$<br><a id="more"></a></p><hr><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>考虑对$K$与$n$的大小关系分类讨论：</p><h2 id="n-leq-2K"><a href="#n-leq-2K" class="headerlink" title="$n\leq 2K$"></a>$n\leq 2K$</h2><p>这时我们显然可以直接写一个$n^2$的暴力算法：将所有点对斜率存下来，然后枚举不同的斜率，使用并查集将某种斜率连接的点并起来，最后连通块的个数就是我们要的答案。<br>时间复杂度$O(n^2\alpha(n)\times hashset)$。</p><h2 id="n-gt-2K"><a href="#n-gt-2K" class="headerlink" title="$n&gt;2K$"></a>$n&gt;2K$</h2><p>可以发现，既然答案不超过$K$，那么我们所要求的斜率一定在前$K$个点两两之间组成的点对中出现了至少$K$次：在$K=2n$时最坏的情况就是每条直线都穿过了两个点，这已经出现了$K$次了，在$n&gt;2K$时只会更多。<br>于是我们对所有出现次数超过$K$次的进行检查，次数是$O(K)$的。<br>时间复杂度$O(nK\times hashset)$。</p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">30005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">400</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=(K&lt;&lt;<span class="number">1</span>)+<span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> L=M*M;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</div><div class="line"><span class="keyword">typedef</span> pair&lt;P,P&gt; PI;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(a,b) make_pair(a,b)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ft first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sd second</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> x[N],y[N],a[N],fa[N],rk[N],reach[N];</div><div class="line">PI <span class="built_in">list</span>[L];</div><div class="line">LL srt[N];</div><div class="line"><span class="keyword">int</span> T,n,m,cnt,ans,ti;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> y?gcd(y,x%y):x;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> son)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (reach[son]!=ti) <span class="keyword">return</span> reach[son]=ti,rk[son]=<span class="number">0</span>,fa[son]=son;</div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> fa[son]==son?son:fa[son]=getfather(fa[son]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">x=getfather(x),y=getfather(y);</div><div class="line"><span class="keyword">if</span> (x==y) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (rk[x]&lt;rk[y]) swap(x,y);</div><div class="line"><span class="keyword">return</span> fa[y]=x,rk[x]+=rk[x]==rk[y],<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"par.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"par.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">for</span> (T=read();T--;)</div><div class="line">&#123;</div><div class="line">n=read();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) x[i]=read(),y[i]=read();</div><div class="line">m=min(K*<span class="number">2</span>,n),cnt=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;++j)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> x_=x[i]-x[j],y_=y[i]-y[j];</div><div class="line"><span class="keyword">if</span> (x_&lt;<span class="number">0</span>||!x_&amp;&amp;y_&lt;<span class="number">0</span>) x_*=<span class="number">-1</span>,y_*=<span class="number">-1</span>;</div><div class="line"><span class="keyword">int</span> g=gcd(<span class="built_in">abs</span>(x_),<span class="built_in">abs</span>(y_));</div><div class="line"><span class="built_in">list</span>[++cnt]=mkp(mkp(y_/g,x_/g),mkp(j,i));</div><div class="line">&#125;</div><div class="line">sort(<span class="built_in">list</span>+<span class="number">1</span>,<span class="built_in">list</span>+<span class="number">1</span>+cnt),ans=n;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> st=<span class="number">1</span>,en;st&lt;=cnt;st=en)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (en=st;en&lt;=cnt&amp;&amp;<span class="built_in">list</span>[st].ft==<span class="built_in">list</span>[en].ft;++en);</div><div class="line"><span class="keyword">if</span> (n&lt;=K*<span class="number">2</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> cur=n;++ti;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=st;i&lt;en;++i) cur-=merge(<span class="built_in">list</span>[i].sd.ft,<span class="built_in">list</span>[i].sd.sd);</div><div class="line">ans=min(ans,cur);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (en-st&gt;=K)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> p=<span class="built_in">list</span>[st].ft.ft,q=<span class="built_in">list</span>[st].ft.sd;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) srt[i]=<span class="number">1l</span>l*p*x[i]<span class="number">-1l</span>l*q*y[i];</div><div class="line">sort(srt+<span class="number">1</span>,srt+<span class="number">1</span>+n),ans=min(ans,(<span class="keyword">int</span>)(unique(srt+<span class="number">1</span>,srt+<span class="number">1</span>+n)-(srt+<span class="number">1</span>)));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给定平面上的$n$个点，请使用最少的互相平行的直线覆盖所有的点。&lt;br&gt;保证答案$K$不超过$400$。&lt;/p&gt;
&lt;p&gt;$1\leq n\leq 3\times10^4$&lt;br&gt;
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="哈希" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="CS Academy" scheme="http://yoursite.com/tags/CS-Academy/"/>
    
      <category term="计算几何" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>在线解决区间逆序对个数统计问题的$O(n\sqrt n)$算法</title>
    <link href="http://yoursite.com/2017/11/08/online-sqrt-algorithm-of-inversion-counting-problem-in-a-range/"/>
    <id>http://yoursite.com/2017/11/08/online-sqrt-algorithm-of-inversion-counting-problem-in-a-range/</id>
    <published>2017-11-08T14:26:24.000Z</published>
    <updated>2017-11-09T07:07:44.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文将介绍一种$O(n\sqrt n)$解决区间逆序对计数的<strong>在线算法</strong>。<br>似乎又是某分块中学那边的奇技淫巧<img src="/image/fail.png" alt="fail"><a id="more"></a></p><hr><h1 id="我会分块！"><a href="#我会分块！" class="headerlink" title="我会分块！"></a>我会分块！</h1><p>考虑将序列分块。然后分以下几种情况讨论：</p><h2 id="两个不相交序列互相之间的逆序对统计"><a href="#两个不相交序列互相之间的逆序对统计" class="headerlink" title="两个不相交序列互相之间的逆序对统计"></a>两个不相交序列互相之间的逆序对统计</h2><p>标题指的是给你两个序列，一个在前面，一个在后面，然后求后面序列的元素在前面序列中的逆序对个数。<br>后面我们会多次遇到这个问题，因此先讲这个。<br>直接归并排序统计即可做到线性。<br>为了降低时间复杂度我们要对每一块预排序记录排名，这样我们就可以省去每次的排序。<br>定义$[x,y]\times[a,b]$表示对区间$[x,y]$和$[a,b]$执行此操作。</p><h2 id="块内的区间逆序对统计"><a href="#块内的区间逆序对统计" class="headerlink" title="块内的区间逆序对统计"></a>块内的区间逆序对统计</h2><p>解决完全被某一块包含的询问，令$g_i$表示第$i$个元素一直到其所在块开头形成的区间内的逆序对个数。<br>那么假设我们询问的是$[st,en]$这个区间，它被块$[l,r]$完全包含，显然答案是$g_{en}-g_{st-1}-[l,st-1]\times[st,en]$<br>$g$函数可以使用离散化+树状数组在开始时预处理出来。</p><h2 id="块间的逆序对统计"><a href="#块间的逆序对统计" class="headerlink" title="块间的逆序对统计"></a>块间的逆序对统计</h2><p>设$f_{i,j}$表示从第$i$块一直到第$j$块形成的区间的逆序对个数。<br>令${st}_i,{en}_i$分别表示第$i$块的开始和结束位置。<br>显然我们有$f_{i,j}=f_{i,j-1}+f_{i+1,j}-f_{i+1,j-1}+[{st}_i,{en}_i]\times[{st}_j,{en}_j]$。<br>于是就可以$O(n\sqrt n)$计算出来。</p><h2 id="散块与散块"><a href="#散块与散块" class="headerlink" title="散块与散块"></a>散块与散块</h2><p>直接当不相交序列归并即可。</p><h2 id="散块与整块"><a href="#散块与整块" class="headerlink" title="散块与整块"></a>散块与整块</h2><p>令$h_{i,j}$表示第$i$个元素对第$j$块的贡献。这个怎么处理呢？<br>将所有元素排序依次插入，记录每一块已有的元素，就能算出$h$了。<br>因为散块一定是一个整块的前缀和后缀，我们再对$h_{i,j}$的$i$做前缀和就能快速查询散块对一个整块的贡献了。</p><p>最后总的时间复杂度就是$O(n\sqrt n)$的了。</p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> buf[<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</div><div class="line"><span class="keyword">for</span> (;x;x/=<span class="number">10</span>) buf[++buf[<span class="number">0</span>]]=x%<span class="number">10</span>;</div><div class="line"><span class="keyword">if</span> (!buf[<span class="number">0</span>]) buf[++buf[<span class="number">0</span>]]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;buf[<span class="number">0</span>];<span class="built_in">putchar</span>(<span class="string">'0'</span>+buf[buf[<span class="number">0</span>]--]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> B=<span class="number">250</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[N],g[N],bid[N],kth[N];</div><div class="line"><span class="keyword">int</span> st[B],en[B],tot[B];</div><div class="line"><span class="keyword">int</span> tmp[<span class="number">2</span>][B];</div><div class="line"><span class="keyword">int</span> h[N][B];</div><div class="line"><span class="keyword">int</span> f[B][B];</div><div class="line"><span class="keyword">int</span> n,q,cnt,block_num,block_size,lastans;</div><div class="line"><span class="keyword">bool</span> is_online=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> key,id;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="title">data</span><span class="params">(<span class="keyword">int</span> key_=<span class="number">0</span>,<span class="keyword">int</span> id_=<span class="number">0</span>)</span></span>&#123;key=key_,id=id_;&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(data <span class="keyword">const</span> d)<span class="keyword">const</span>&#123;<span class="keyword">return</span> key&lt;d.key;&#125;</div><div class="line">&#125;srt[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;-x;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fenwick_tree</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> v[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> delta)</span></span>&#123;<span class="keyword">for</span> (;x&lt;=n;x+=lowbit(x)) v[x]+=delta;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> ret=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;x;x-=lowbit(x)) ret+=v[x];</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line">&#125;t;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">discretize</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) srt[i]=data(a[i],i);</div><div class="line">sort(srt+<span class="number">1</span>,srt+<span class="number">1</span>+n),cnt=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[srt[i].id]=cnt+=srt[i].key!=srt[i<span class="number">-1</span>].key;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> cur1=<span class="number">1</span>,cur2=<span class="number">1</span>,ret=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;cur1&lt;=tmp[<span class="number">0</span>][<span class="number">0</span>]||cur2&lt;=tmp[<span class="number">1</span>][<span class="number">0</span>];)</div><div class="line"><span class="keyword">if</span> (cur2&gt;tmp[<span class="number">1</span>][<span class="number">0</span>]||cur1&lt;=tmp[<span class="number">0</span>][<span class="number">0</span>]&amp;&amp;tmp[<span class="number">0</span>][cur1]&lt;=tmp[<span class="number">1</span>][cur2]) ++cur1;</div><div class="line"><span class="keyword">else</span> ret+=tmp[<span class="number">0</span>][<span class="number">0</span>]-cur1+<span class="number">1</span>,++cur2;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> a[x]&lt;a[y];&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">//divide the sequence into several blocks</span></div><div class="line">block_size=(<span class="keyword">int</span>)trunc(<span class="built_in">sqrt</span>(n));</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> st_=<span class="number">1</span>,en_;st_&lt;=n;st_=en_+<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">en_=min(n,st_+block_size<span class="number">-1</span>),st[++block_num]=st_,en[block_num]=en_;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=st_;i&lt;=en_;++i) bid[i]=block_num,kth[i]=i;</div><div class="line">sort(kth+st_,kth+en_+<span class="number">1</span>,cmp);</div><div class="line">&#125;</div><div class="line"><span class="comment">//calculate g function</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=block_num;++i)</div><div class="line">&#123;</div><div class="line"><span class="built_in">memset</span>(t.v,<span class="number">0</span>,<span class="keyword">sizeof</span> t.v);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=st[i],cur=<span class="number">0</span>;j&lt;=en[i];++j) g[j]=cur+=t.query(cnt-a[j]),t.modify(cnt-a[j]+<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//calculate f function</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=block_num;++i) f[i][i]=g[en[i]];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">2</span>;l&lt;=block_num;++l)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,j;i+l<span class="number">-1</span>&lt;=block_num;++i)</div><div class="line">&#123;</div><div class="line">j=i+l<span class="number">-1</span>,f[i][j]=f[i+<span class="number">1</span>][j]+f[i][j<span class="number">-1</span>]-f[i+<span class="number">1</span>][j<span class="number">-1</span>];</div><div class="line">tmp[<span class="number">0</span>][<span class="number">0</span>]=tmp[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=st[i];k&lt;=en[i];++k) tmp[<span class="number">0</span>][++tmp[<span class="number">0</span>][<span class="number">0</span>]]=a[kth[k]];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=st[j];k&lt;=en[j];++k) tmp[<span class="number">1</span>][++tmp[<span class="number">1</span>][<span class="number">0</span>]]=a[kth[k]];</div><div class="line">f[i][j]+=merge();</div><div class="line">&#125;</div><div class="line"><span class="comment">//calculate h function</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> lcur=<span class="number">1</span>,rcur;lcur&lt;=n;)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (rcur=lcur;rcur&lt;=n&amp;&amp;srt[lcur].key==srt[rcur].key;++rcur)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=bid[srt[rcur].id]+<span class="number">1</span>;i&lt;=block_num;++i) h[srt[rcur].id][i]=tot[i];</div><div class="line"><span class="keyword">for</span> (;lcur&lt;rcur;++lcur) ++tot[bid[srt[lcur].id]];</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=block_num;++i) tot[i]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> lcur=n,rcur;lcur&gt;=<span class="number">1</span>;)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (rcur=lcur;rcur&gt;=<span class="number">1</span>&amp;&amp;srt[lcur].key==srt[rcur].key;--rcur)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;bid[srt[rcur].id];++i) h[srt[rcur].id][i]=tot[i];</div><div class="line"><span class="keyword">for</span> (;lcur&gt;rcur;--lcur) ++tot[bid[srt[lcur].id]];</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=block_num;++i)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=st[i]+<span class="number">1</span>;j&lt;=en[i];++j)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=block_num;++k)</div><div class="line">h[j][k]+=h[j<span class="number">-1</span>][k];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> st,<span class="keyword">int</span> en,<span class="keyword">int</span> r)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> ret=(en==l<span class="number">-1</span>?<span class="number">0</span>:g[en])-(st==l?<span class="number">0</span>:g[st<span class="number">-1</span>]);</div><div class="line">tmp[<span class="number">0</span>][<span class="number">0</span>]=tmp[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;++i) <span class="keyword">if</span> (l&lt;=kth[i]&amp;&amp;kth[i]&lt;st) tmp[<span class="number">0</span>][++tmp[<span class="number">0</span>][<span class="number">0</span>]]=a[kth[i]];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;++i) <span class="keyword">if</span> (st&lt;=kth[i]&amp;&amp;kth[i]&lt;=en) tmp[<span class="number">1</span>][++tmp[<span class="number">1</span>][<span class="number">0</span>]]=a[kth[i]];</div><div class="line">ret-=merge();</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"girlseq.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"girlseq.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">n=read();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=read();</div><div class="line">discretize(),process(),q=read(),lastans=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l,r,lid,rid;q--;)</div><div class="line">&#123;</div><div class="line">lid=bid[l=read()^(lastans*is_online)],rid=bid[r=read()^(lastans*is_online)];</div><div class="line"><span class="keyword">if</span> (l!=st[lid]) ++lid;</div><div class="line"><span class="keyword">if</span> (r!=en[rid]) --rid;</div><div class="line"><span class="keyword">if</span> (bid[l]==bid[r]) lastans=query(st[bid[l]],l,r,en[bid[l]]);</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">lastans=query(st[bid[l]],l,st[lid]<span class="number">-1</span>,en[bid[l]])+query(st[bid[r]],en[rid]+<span class="number">1</span>,r,en[bid[r]])+f[lid][rid];</div><div class="line">tmp[<span class="number">0</span>][<span class="number">0</span>]=tmp[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=st[bid[l]];i&lt;=en[bid[l]];++i) <span class="keyword">if</span> (l&lt;=kth[i]&amp;&amp;kth[i]&lt;st[lid]) tmp[<span class="number">0</span>][++tmp[<span class="number">0</span>][<span class="number">0</span>]]=a[kth[i]];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=st[bid[r]];i&lt;=en[bid[r]];++i) <span class="keyword">if</span> (en[rid]&lt;kth[i]&amp;&amp;kth[i]&lt;=r) tmp[<span class="number">1</span>][++tmp[<span class="number">1</span>][<span class="number">0</span>]]=a[kth[i]];</div><div class="line">lastans+=merge();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=lid;i&lt;=rid;++i) lastans+=h[st[lid]<span class="number">-1</span>][i]-h[l<span class="number">-1</span>][i]+(en[bid[r]]!=r)*h[r][i];</div><div class="line">&#125;</div><div class="line">write(lastans),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">&#125;</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;本文将介绍一种$O(n\sqrt n)$解决区间逆序对计数的&lt;strong&gt;在线算法&lt;/strong&gt;。&lt;br&gt;似乎又是某分块中学那边的奇技淫巧&lt;img src=&quot;/image/fail.png&quot; alt=&quot;fail&quot;&gt;
    
    </summary>
    
      <category term="学习小记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="计数类问题" scheme="http://yoursite.com/tags/%E8%AE%A1%E6%95%B0%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="阈值均衡" scheme="http://yoursite.com/tags/%E9%98%88%E5%80%BC%E5%9D%87%E8%A1%A1/"/>
    
      <category term="预处理" scheme="http://yoursite.com/tags/%E9%A2%84%E5%A4%84%E7%90%86/"/>
    
      <category term="逆序对" scheme="http://yoursite.com/tags/%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    
  </entry>
  
  <entry>
    <title>ONTAK2015, BZOJ4298 Bajtocja</title>
    <link href="http://yoursite.com/2017/11/07/bzoj4298/"/>
    <id>http://yoursite.com/2017/11/07/bzoj4298/</id>
    <published>2017-11-07T12:52:32.000Z</published>
    <updated>2017-11-07T13:30:25.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定$d$张无向图，每张图都有$n$个点。一开始，在任何一张图中都没有任何边。<br>接下来有$m$次操作，每次操作会给出$a,b,k$，意为在第$k$张图中的点$a$和点$b$之间添加一条无向边。<br>你需要在每次操作之后输出有序数对$(a,b)$的个数，使得$1\leq a,b\leq n$，且$a$点和$b$点在$d$张图中都连通。</p><p>$1\leq d\leq200,1\leq n\leq5000,1\leq m\leq 10^6$<br><a id="more"></a></p><hr><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>设$f(x,i)$表示点$x$在第$i$张图里面的连通块编号，这个在有加边操作时可以使用启发式合并来快速地更新。<br>如果$x$和$y$两个点在所有图里面都联通，显然$\forall 1\leq i\leq d,f(x,i)=f(y,i)$。<br>考虑对每一个$x$都维护所有$f(x,i)$的哈希值，然后再使用一个哈希表来找到相同哈希值的点的个数就能求答案了。<br>时间复杂度$O(dn \log n+m)$。</p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>一开始写的时候以为哈希表可以直接删除元素结果调了半天……简直智障qwq<br>不知为什么运行效率垫底。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> buf[<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</div><div class="line"><span class="keyword">for</span> (;x;x/=<span class="number">10</span>) buf[++buf[<span class="number">0</span>]]=x%<span class="number">10</span>;</div><div class="line"><span class="keyword">if</span> (!buf[<span class="number">0</span>]) buf[++buf[<span class="number">0</span>]]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;buf[<span class="number">0</span>];<span class="built_in">putchar</span>(<span class="string">'0'</span>+buf[buf[<span class="number">0</span>]--]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD1=<span class="number">330301441</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD2=<span class="number">1004535809</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">7340033</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> P1=<span class="number">269</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> P2=<span class="number">467</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</div><div class="line"><span class="keyword">typedef</span> pair&lt;P,<span class="keyword">int</span>&gt; data;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(a,b) make_pair(a,b)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ft first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sd second</span></div><div class="line"></div><div class="line"><span class="keyword">inline</span> P <span class="keyword">operator</span>+(P x,P y)&#123;<span class="keyword">return</span> mkp((x.ft+y.ft)%MOD1,(x.sd+y.sd)%MOD2);&#125;</div><div class="line"><span class="keyword">inline</span> P &amp;<span class="keyword">operator</span>+=(P &amp;x,P <span class="keyword">const</span> y)&#123;<span class="keyword">return</span> x=x+y;&#125;</div><div class="line"><span class="keyword">inline</span> P <span class="keyword">operator</span>-(P <span class="keyword">const</span> x)&#123;<span class="keyword">return</span> mkp(MOD1-x.ft,MOD2-x.sd);&#125;</div><div class="line"><span class="keyword">inline</span> P <span class="keyword">operator</span>-(P x,P y)&#123;<span class="keyword">return</span> x+(-y);&#125;</div><div class="line"><span class="keyword">inline</span> P &amp;<span class="keyword">operator</span>-=(P &amp;x,P <span class="keyword">const</span> y)&#123;<span class="keyword">return</span> x=x-y;&#125;</div><div class="line"><span class="keyword">inline</span> P <span class="keyword">operator</span>*(P x,P y)&#123;<span class="keyword">return</span> mkp(<span class="number">1l</span>l*x.ft*y.ft%MOD1,<span class="number">1l</span>l*x.sd*y.sd%MOD2);&#125;</div><div class="line"><span class="keyword">inline</span> P &amp;<span class="keyword">operator</span>*=(P &amp;x,P <span class="keyword">const</span> y)&#123;<span class="keyword">return</span> x=x*y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> D=<span class="number">205</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=D*N;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; component[S];</div><div class="line">data <span class="built_in">list</span>[<span class="number">2</span>][MOD];</div><div class="line"><span class="keyword">int</span> fa[S];</div><div class="line">P hash[N];</div><div class="line">P POW[D];</div><div class="line"><span class="keyword">int</span> d,n,m,ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> son)</span></span>&#123;<span class="keyword">return</span> fa[son]==son?son:fa[son]=getfather(fa[son]);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sqr</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getposition</span><span class="params">(P h,<span class="keyword">bool</span> &amp;flag,<span class="keyword">int</span> &amp;pos)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> itr0=h.ft%MOD,itr1=h.sd%MOD;</div><div class="line"><span class="keyword">for</span> (;<span class="built_in">list</span>[<span class="number">0</span>][itr0].ft!=mkp(<span class="number">-1</span>,<span class="number">-1</span>)&amp;&amp;<span class="built_in">list</span>[<span class="number">0</span>][itr0].ft!=h&amp;&amp;<span class="built_in">list</span>[<span class="number">1</span>][itr1].ft!=mkp(<span class="number">-1</span>,<span class="number">-1</span>)&amp;&amp;<span class="built_in">list</span>[<span class="number">1</span>][itr1].ft!=h;(++itr0)%=MOD,(++itr1)%=MOD);</div><div class="line"><span class="keyword">if</span> (<span class="built_in">list</span>[<span class="number">0</span>][itr0].ft==mkp(<span class="number">-1</span>,<span class="number">-1</span>)||<span class="built_in">list</span>[<span class="number">0</span>][itr0].ft==h) flag=<span class="number">0</span>,pos=itr0;</div><div class="line"><span class="keyword">else</span> flag=<span class="number">1</span>,pos=itr1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(P h)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">bool</span> flag;<span class="keyword">int</span> pos;</div><div class="line">getposition(h,flag,pos),ans-=sqr(<span class="built_in">list</span>[flag][pos].sd),ans+=sqr(--<span class="built_in">list</span>[flag][pos].sd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(P h)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">bool</span> flag;<span class="keyword">int</span> pos;</div><div class="line">getposition(h,flag,pos),ans-=sqr(<span class="built_in">list</span>[flag][pos].sd),<span class="built_in">list</span>[flag][pos].ft=h,ans+=sqr(++<span class="built_in">list</span>[flag][pos].sd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"bajtocja.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"bajtocja.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MOD;++i) <span class="built_in">list</span>[<span class="number">0</span>][i]=<span class="built_in">list</span>[<span class="number">1</span>][i]=mkp(mkp(<span class="number">-1</span>,<span class="number">-1</span>),<span class="number">0</span>);</div><div class="line">d=read(),n=read(),m=read();</div><div class="line">POW[<span class="number">0</span>]=mkp(<span class="number">1</span>,<span class="number">1</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=d;++i) POW[i]=POW[i<span class="number">-1</span>]*mkp(P1,P2);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=d*n;++x) fa[x]=x,component[x].push_back((x<span class="number">-1</span>)%n+<span class="number">1</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n;++x)</div><div class="line">&#123;</div><div class="line">hash[x]=mkp(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d;++i) hash[x]+=mkp(x,x)*POW[i];</div><div class="line">insert(hash[x]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,id,x,y,fx,fy;i&lt;=m;++i)</div><div class="line">&#123;</div><div class="line">x=read(),y=read(),id=read()<span class="number">-1</span>,fx=getfather(x+id*n),fy=getfather(y+id*n);</div><div class="line"><span class="keyword">if</span> (fx!=fy)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (component[fx].size()&lt;component[fy].size()) swap(x,y),swap(fx,fy);</div><div class="line">fa[fy]=fx;</div><div class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=component[fy].begin();it!=component[fy].end();++it)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> p=*it;</div><div class="line">remove(hash[p]),hash[p]-=POW[id]*mkp((fy<span class="number">-1</span>)%n+<span class="number">1</span>,(fy<span class="number">-1</span>)%n+<span class="number">1</span>);</div><div class="line">hash[p]+=POW[id]*mkp((fx<span class="number">-1</span>)%n+<span class="number">1</span>,(fx<span class="number">-1</span>)%n+<span class="number">1</span>),insert(hash[p]);</div><div class="line">component[fx].push_back(p);</div><div class="line">&#125;</div><div class="line">component[fy].resize(<span class="number">0</span>),component[fy].reserve(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">write(ans),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">&#125;</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给定$d$张无向图，每张图都有$n$个点。一开始，在任何一张图中都没有任何边。&lt;br&gt;接下来有$m$次操作，每次操作会给出$a,b,k$，意为在第$k$张图中的点$a$和点$b$之间添加一条无向边。&lt;br&gt;你需要在每次操作之后输出有序数对$(a,b)$的个数，使得$1\leq a,b\leq n$，且$a$点和$b$点在$d$张图中都连通。&lt;/p&gt;
&lt;p&gt;$1\leq d\leq200,1\leq n\leq5000,1\leq m\leq 10^6$&lt;br&gt;
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="ONTAK" scheme="http://yoursite.com/tags/ONTAK/"/>
    
      <category term="BZOJ" scheme="http://yoursite.com/tags/BZOJ/"/>
    
      <category term="哈希" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="启发式合并" scheme="http://yoursite.com/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 702F T-Shirts</title>
    <link href="http://yoursite.com/2017/11/02/codeforces-702f/"/>
    <id>http://yoursite.com/2017/11/02/codeforces-702f/</id>
    <published>2017-11-02T14:10:48.000Z</published>
    <updated>2017-11-02T14:38:29.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给出$n$件T-shirt的质量$q_i$和花费$c_i$，有$k$个人最开始分别有$b_i$的金钱。<br>每个人的选衣服的策略都是一样的：将所有T-shirt按照重要程度从大到小排序，重要程度相同的按花费从小到大排，然后每个人从头开始取T-shirt，如果金钱数大于当前的T-shirt的花费，那么就买下这件衣服，问每个人最多能够买的T-shirt数量。</p><p>$1\leq n,k\leq 2\times10^5$<br>$1\leq q_i,c_i,b_i\leq 10^9$<br><a id="more"></a></p><hr><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>直接按照一个一个人模拟难以下手。我们按照选取顺序来依次考虑每一件衣服然后一起处理所有人的情况。<br>使用一棵平衡树(Treap or Splay tree)来维护所有人当前以及买的衣服数量以及剩余的钱数，排序的关键字是剩余的钱数。<br>假设我们当前考虑到衣服花费为$c$，那么我们就将平衡树split成小于$c$和大于等于$c$的两个部分，给第二个部分的答案打上加$1$的标记。<br>然后我们现在要维护买了这件衣服之后的平衡树，由于右边部分有的人的剩余价钱在买完这件衣服之后可能小于左边的最大值，我们并不能直接使用平衡树的合并算法。<br>怎么办呢？其实直接将右边部分买完后小于左边最大值的一个个加入到左边部分就行了。一个人（剩余钱数为$x$）被加入到左边（设最大值为$a$）当且仅当$x-c&lt; a$，我们又知道$a&lt; c$，于是有$x-c&lt; c$，也就是说$\frac x2&lt; c$。这意味着什么呢？一旦一个人被暴力从右边加入到左边，他的剩余钱数一定至少减少为原来的一半。因此，每个人最多只会被暴力插入（雾）$O(\log b)$次。实现的时候我们直接把右边部分小于$c$的暴力插入到左边效果和这样是一样的。<br>于是时间复杂度是$O(n \log k\log b)$的。</p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>其实做这题是为了突击学习Treap（捂脸）。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uint;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> buf[<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</div><div class="line"><span class="keyword">for</span> (;x;x/=<span class="number">10</span>) buf[++buf[<span class="number">0</span>]]=x%<span class="number">10</span>;</div><div class="line"><span class="keyword">if</span> (!buf[<span class="number">0</span>]) buf[++buf[<span class="number">0</span>]]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;buf[<span class="number">0</span>];<span class="built_in">putchar</span>(<span class="string">'0'</span>+buf[buf[<span class="number">0</span>]--]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Q=<span class="number">200005</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans[Q];</div><div class="line"></div><div class="line">uint seed=<span class="number">0x12F81AC</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> uint <span class="title">random_</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">seed^=seed&lt;&lt;<span class="number">13</span>;</div><div class="line">seed^=seed&gt;&gt;<span class="number">17</span>;</div><div class="line">seed^=seed&lt;&lt;<span class="number">5</span>;</div><div class="line"><span class="keyword">return</span> seed;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">treap</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> son[Q][<span class="number">2</span>],val[Q][<span class="number">2</span>],tag[Q][<span class="number">2</span>];<span class="comment">//0 number 1 money</span></div><div class="line">uint fix[Q];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ADD</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> delta,<span class="keyword">bool</span> t)</span></span>&#123;val[rt][t]+=delta,tag[rt][t]+=delta;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> rt)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (!rt) <span class="keyword">return</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;<span class="number">2</span>;++t)</div><div class="line"><span class="keyword">if</span> (tag[rt][t])</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (son[rt][<span class="number">0</span>]) ADD(son[rt][<span class="number">0</span>],tag[rt][t],t);</div><div class="line"><span class="keyword">if</span> (son[rt][<span class="number">1</span>]) ADD(son[rt][<span class="number">1</span>],tag[rt][t],t);</div><div class="line">tag[rt][t]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> rt1,<span class="keyword">int</span> rt2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">clear(rt1),clear(rt2);</div><div class="line"><span class="keyword">if</span> (!(rt1&amp;&amp;rt2)) <span class="keyword">return</span> rt1^rt2;</div><div class="line"><span class="keyword">int</span> rt;</div><div class="line"><span class="keyword">if</span> (fix[rt1]&lt;fix[rt2]) son[rt1][<span class="number">1</span>]=merge(son[rt1][<span class="number">1</span>],rt2),rt=rt1;</div><div class="line"><span class="keyword">else</span> son[rt2][<span class="number">0</span>]=merge(rt1,son[rt2][<span class="number">0</span>]),rt=rt2;</div><div class="line"><span class="keyword">return</span> rt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> x,<span class="keyword">int</span> &amp;l,<span class="keyword">int</span> &amp;r)</span><span class="comment">//v[l]&lt;x v[r]&gt;=x</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (!rt)</div><div class="line">&#123;</div><div class="line">l=r=<span class="number">0</span>;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">clear(rt);</div><div class="line"><span class="keyword">int</span> l_=<span class="number">0</span>,r_=<span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (x&lt;=val[rt][<span class="number">1</span>]) split(son[rt][<span class="number">0</span>],x,l_,r_),son[rt][<span class="number">0</span>]=r_,l=l_,r=rt;</div><div class="line"><span class="keyword">else</span> split(son[rt][<span class="number">1</span>],x,l_,r_),son[rt][<span class="number">1</span>]=l_,l=rt,r=r_;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> np)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</div><div class="line">split(rt,val[np][<span class="number">1</span>],l,r),rt=merge(l,np),rt=merge(rt,r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heuristic_merge</span><span class="params">(<span class="keyword">int</span> &amp;rt1,<span class="keyword">int</span> rt2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (!rt2) <span class="keyword">return</span>;</div><div class="line">clear(rt2);</div><div class="line"><span class="keyword">int</span> l=son[rt2][<span class="number">0</span>],r=son[rt2][<span class="number">1</span>];</div><div class="line">son[rt2][<span class="number">0</span>]=son[rt2][<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">insert(rt1,rt2),heuristic_merge(rt1,l),heuristic_merge(rt1,r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> rt)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (!rt) <span class="keyword">return</span>;</div><div class="line">clear(rt),ans[rt]=val[rt][<span class="number">0</span>],getans(son[rt][<span class="number">0</span>]),getans(son[rt][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line">&#125;t;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">t_shirts</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> cost,qlt;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(t_shirts <span class="keyword">const</span> ts)<span class="keyword">const</span>&#123;<span class="keyword">return</span> qlt&gt;ts.qlt||qlt==ts.qlt&amp;&amp;cost&lt;ts.cost;&#125;</div><div class="line">&#125;tsrt[N];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,q,root;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,l,mid,r;i&lt;=n;++i)</div><div class="line">&#123;</div><div class="line">t.split(root,tsrt[i].cost,l,r);</div><div class="line"><span class="keyword">if</span> (r) t.ADD(r,<span class="number">1</span>,<span class="number">0</span>),t.ADD(r,-tsrt[i].cost,<span class="number">1</span>);</div><div class="line">t.split(r,tsrt[i].cost<span class="number">-1</span>,mid,r),t.heuristic_merge(l,mid),root=t.merge(l,r);</div><div class="line">&#125;</div><div class="line">t.getans(root);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"tshirts.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"tshirts.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">n=read();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) tsrt[i].cost=read(),tsrt[i].qlt=read();</div><div class="line">sort(tsrt+<span class="number">1</span>,tsrt+<span class="number">1</span>+n);</div><div class="line">q=read();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i) t.val[i][<span class="number">1</span>]=read(),t.fix[i]=random_(),t.insert(root,i);</div><div class="line">calc();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i) write(ans[i]),<span class="built_in">putchar</span>(i&lt;q?<span class="string">' '</span>:<span class="string">'\n'</span>);</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给出$n$件T-shirt的质量$q_i$和花费$c_i$，有$k$个人最开始分别有$b_i$的金钱。&lt;br&gt;每个人的选衣服的策略都是一样的：将所有T-shirt按照重要程度从大到小排序，重要程度相同的按花费从小到大排，然后每个人从头开始取T-shirt，如果金钱数大于当前的T-shirt的花费，那么就买下这件衣服，问每个人最多能够买的T-shirt数量。&lt;/p&gt;
&lt;p&gt;$1\leq n,k\leq 2\times10^5$&lt;br&gt;$1\leq q_i,c_i,b_i\leq 10^9$&lt;br&gt;
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="Treap" scheme="http://yoursite.com/tags/Treap/"/>
    
      <category term="平衡树" scheme="http://yoursite.com/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>PA2014 Final, BZOJ3724 Krolestwo</title>
    <link href="http://yoursite.com/2017/11/02/bzoj3724/"/>
    <id>http://yoursite.com/2017/11/02/bzoj3724/</id>
    <published>2017-11-02T03:46:12.000Z</published>
    <updated>2017-11-02T14:33:31.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>你有一个$n$个点$m$条边的无向连通图，边的总数为偶数。<br>设图中有$k$个奇点（度数为奇数的点），你需要把它们配成$\frac k2$个点对（显然$k$被$2$整除）。对于每个点对$(u,v)$，你需要用一条长度为偶数（假设每条边长度为$1$）的路径将$u$和$v$连接。<br>每条路径允许经过重复的点，但不允许经过重复的边。这$\frac k2$条路径之间也不能有重复的边。<br>无解输出NIE。</p><p>$2\leq n,m\leq 2.5\times10^5$<br><a id="more"></a></p><hr><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>首先一看度数奇偶性以及不能经过重复的边但是可以经过重复的点，就能猜到是欧拉路径相关。<br>那么怎么把问题转化成欧拉回路呢？考虑加入一个特殊点，其向每一个奇点都有连边，然后可以发现题目要求的加上这些边就是欧拉回路了。<br>可是直接这样做可能会有问题：题目要求的是长度为偶数的路径。我们这样搞不一定能弄到偶数长度的。<br>怎么办呢？考虑奇偶染色的思路。我们将每一个点$x$拆成$u_x$和$v_x$两个点，如果我们能够保证欧拉路径在从特殊点进入$u$之后是交替经过两种点最后从$u$点回到特殊点，那么问题就解决了。<br>考虑让特殊点只和奇点$x$的$u_x$连边。然后对于原来的边$(x,y)$，我们需要决定到底是选择连$(u_x,v_y)$还是$(v_x,u_y)$，这怎么办呢？<br>对于一个奇点，它的$u_x$已经和特殊点有连边，为了使其有欧拉回路我们还需要给它连上奇数条路径，一个偶点的$u_x$则只需要偶数条。（显然考虑了$u$点满足就不需要考虑$v$点）<br>问题可以抽象成给一个无向连通图定向，使得某些点出度为奇数，其余为偶数。我们可以随便找一棵DFS树，对于非树边随意定向，然后从叶子开始向上考虑，通过调整连接父亲的边的方向来满足条件。至于根节点，简单的验算即可以证明由于原图边总数是偶数的，只要非根节点满足了条件根节点一定可以满足条件。<br>然后跑一遍Hierholzer’s algorithm找欧拉回路就好了。时间复杂度$O(n+m)$。<br>至于什么无解，当然是不存在的啦！</p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> buf[<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</div><div class="line"><span class="keyword">for</span> (;x;x/=<span class="number">10</span>) buf[++buf[<span class="number">0</span>]]=x%<span class="number">10</span>;</div><div class="line"><span class="keyword">if</span> (!buf[<span class="number">0</span>]) buf[++buf[<span class="number">0</span>]]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;buf[<span class="number">0</span>];<span class="built_in">putchar</span>(<span class="string">'0'</span>+buf[buf[<span class="number">0</span>]--]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">250005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">250005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> V=N&lt;&lt;<span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> E=M+N&lt;&lt;<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> x,y;</div><div class="line">&#125;edg[M];</div><div class="line"></div><div class="line"><span class="keyword">int</span> tov[E],nxt[E],euler_path[E];</div><div class="line"><span class="keyword">int</span> matchpath[M];</div><div class="line"><span class="keyword">bool</span> is_fwd[M];</div><div class="line"><span class="keyword">bool</span> used[E];</div><div class="line"><span class="keyword">bool</span> vis[V];</div><div class="line"><span class="keyword">int</span> last[V];</div><div class="line"><span class="keyword">int</span> deg[N];</div><div class="line"><span class="keyword">int</span> n,m,tot,el,len;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;tov[++tot]=y,nxt[tot]=last[x],last[x]=tot;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;insert(x,y),insert(y,x);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearedge</span><span class="params">()</span></span>&#123;<span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span> last),<span class="built_in">memset</span>(nxt,<span class="number">0</span>,<span class="keyword">sizeof</span> nxt),<span class="built_in">memset</span>(tov,<span class="number">0</span>,<span class="keyword">sizeof</span> tov),tot=<span class="number">0</span>;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">determine</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> e=<span class="number">0</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">bool</span> out_degree=<span class="number">0</span>;</div><div class="line">vis[x]=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x],y;i;i=nxt[i])</div><div class="line"><span class="keyword">if</span> (e!=i+<span class="number">1</span>&gt;&gt;<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (vis[y=tov[i]]) is_fwd[i+<span class="number">1</span>&gt;&gt;<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line"><span class="keyword">else</span> determine(y,i+<span class="number">1</span>&gt;&gt;<span class="number">1</span>);</div><div class="line">out_degree^=is_fwd[i+<span class="number">1</span>&gt;&gt;<span class="number">1</span>]^(edg[i+<span class="number">1</span>&gt;&gt;<span class="number">1</span>].y==x);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (e) <span class="keyword">if</span> (out_degree^(deg[x]&amp;<span class="number">1</span>)) out_degree^=<span class="number">1</span>,is_fwd[e]=edg[e].x==x;</div><div class="line"><span class="keyword">else</span> is_fwd[e]=edg[e].y==x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hierholzer</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> e=<span class="number">0</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">for</span> (;last[x]&amp;&amp;used[last[x]];last[x]=nxt[last[x]]);</div><div class="line"><span class="keyword">if</span> (last[x])</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i=last[x],y=tov[i];</div><div class="line">used[i]=used[((i<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>]=<span class="number">1</span>,Hierholzer(y,i);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (e) euler_path[++el]=e;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=el,e,st=<span class="number">0</span>,en=<span class="number">0</span>;i&gt;=<span class="number">1</span>;--i)</div><div class="line">&#123;</div><div class="line">e=euler_path[i];</div><div class="line"><span class="keyword">if</span> (tov[e])</div><div class="line"><span class="keyword">if</span> (!st) st=en=tov[e],len=<span class="number">0</span>;</div><div class="line"><span class="keyword">else</span> en=tov[e],matchpath[++len]=e+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">write(st+<span class="number">1</span>&gt;&gt;<span class="number">1</span>),<span class="built_in">putchar</span>(<span class="string">' '</span>),write(en+<span class="number">1</span>&gt;&gt;<span class="number">1</span>),<span class="built_in">putchar</span>(<span class="string">' '</span>),write(len),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len;++j) write(matchpath[j]),<span class="built_in">putchar</span>(j&lt;len?<span class="string">' '</span>:<span class="string">'\n'</span>);</div><div class="line">st=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"kro.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"kro.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">n=read(),m=read();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=m;++i) ++deg[edg[i].x=x=read()],++deg[edg[i].y=y=read()],addedge(x,y);</div><div class="line">determine(<span class="number">1</span>),clearedge();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</div><div class="line"><span class="keyword">if</span> (is_fwd[i]) addedge(edg[i].x*<span class="number">2</span><span class="number">-1</span>,edg[i].y*<span class="number">2</span>);</div><div class="line"><span class="keyword">else</span> addedge(edg[i].x*<span class="number">2</span>,edg[i].y*<span class="number">2</span><span class="number">-1</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span> (deg[i]&amp;<span class="number">1</span>) addedge(<span class="number">0</span>,i*<span class="number">2</span><span class="number">-1</span>);</div><div class="line">Hierholzer(<span class="number">0</span>),process();</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;你有一个$n$个点$m$条边的无向连通图，边的总数为偶数。&lt;br&gt;设图中有$k$个奇点（度数为奇数的点），你需要把它们配成$\frac k2$个点对（显然$k$被$2$整除）。对于每个点对$(u,v)$，你需要用一条长度为偶数（假设每条边长度为$1$）的路径将$u$和$v$连接。&lt;br&gt;每条路径允许经过重复的点，但不允许经过重复的边。这$\frac k2$条路径之间也不能有重复的边。&lt;br&gt;无解输出NIE。&lt;/p&gt;
&lt;p&gt;$2\leq n,m\leq 2.5\times10^5$&lt;br&gt;
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="BZOJ" scheme="http://yoursite.com/tags/BZOJ/"/>
    
      <category term="DFS树" scheme="http://yoursite.com/tags/DFS%E6%A0%91/"/>
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="PA" scheme="http://yoursite.com/tags/PA/"/>
    
      <category term="欧拉路径" scheme="http://yoursite.com/tags/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>Baltic2015, LOJ6238, BZOJ4121 Network</title>
    <link href="http://yoursite.com/2017/10/25/loj6238/"/>
    <id>http://yoursite.com/2017/10/25/loj6238/</id>
    <published>2017-10-25T13:51:56.000Z</published>
    <updated>2017-11-02T09:08:49.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一颗$n$个点的无根树，求最少加多少条边使形成的图形任意删除一条边后都联通，边是无向的。<br>输出最少加边数和任意一种加边方案。注意不能加已出现的边。</p><p>$3\leq n\leq 5\times10^5$<br><a id="more"></a></p><hr><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>一道很套路的题目，想想还是写出来吧。<br>首先显然连接的边都是叶子肯定不会比其他方案要劣。然后问题变成选出尽量少的起点和终点都是叶子节点的路径覆盖完树上所有边。<br>这种题一般都是证明答案的上/下界然后对着构造。这题假设我们的叶子节点有$m$个，显然答案不会小于$\lceil\frac m2\rceil$。因为每个叶子都需要一条边来使其与父亲双联通。<br>然后考虑构造一个答案为$\lceil\frac m2\rceil$的解。假如我们选取了一个节点$x$作为根，我们希望每个叶子都能和一个与它不属于同一棵子树（根节点儿子为根）的叶子匹配。令$\{a_k\}$表示其各个儿子节点子树内的叶子个数。我们相当于每次选择一组非零的$a_i,a_j$将它们都减$1$，表示这两个子树内选择两个叶子匹配，执行到最后如果剩下了一个$1$就将其随便和一个其它子树的叶子匹配。<br>显然当最大的$a_i$的两倍超过$\Sigma a_i$时就不存在任何可行方案。那么我们就找一个类似“重心”的点（只不过是子树大小改为子树叶子个数）作为根，然后每次贪心地选取最大的一组$a_i,a_j$去匹配，各自减$1$放回去，直到无法执行就好了。<br>为什么这样一定能出解呢？考虑归纳证明，选取最大的$a_i,a_j$都减$1$塞回去，$\{a_k\}$依然满足最大值两倍不超过总和。然后边界情况两个$1$是显然成立的。证毕。<br>时间复杂度$O(n\log n)$。</p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> E=N&lt;&lt;<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> last[N],cnt[N],que[N],fa[N],size[N],deg[N];</div><div class="line"><span class="keyword">int</span> tov[E],nxt[E];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; leaf[N];</div><div class="line"><span class="keyword">int</span> n,tot,rt,head,tail,all;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">comp</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x,<span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> cnt[x]&gt;cnt[y]||cnt[x]==cnt[y]&amp;&amp;x&lt;y;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>,comp&gt; heap;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;tov[++tot]=y,nxt[tot]=last[x],last[x]=tot;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">core</span><span class="params">(<span class="keyword">int</span> og)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> rets=n+<span class="number">1</span>,ret=<span class="number">0</span>,i,x,y,tmp;</div><div class="line"><span class="keyword">for</span> (head=<span class="number">0</span>,fa[que[tail=<span class="number">1</span>]=og]=<span class="number">0</span>;head&lt;tail;)</div><div class="line"><span class="keyword">for</span> (size[x=que[++head]]=<span class="number">0</span>,i=last[x];i;i=nxt[i])</div><div class="line"><span class="keyword">if</span> ((y=tov[i])!=fa[x]) size[fa[que[++tail]=y]=x]=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (head=<span class="number">1</span>;head&lt;=tail;++head) size[que[head]]^=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (head=tail;head&gt;<span class="number">1</span>;--head) size[fa[que[head]]]+=size[que[head]];</div><div class="line"><span class="keyword">for</span> (head=<span class="number">1</span>;head&lt;=tail;++head)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (tmp=size[og]-size[x=que[head]],i=last[x];i;i=nxt[i])</div><div class="line"><span class="keyword">if</span> ((y=tov[i])!=fa[x]) tmp=max(tmp,size[y]);</div><div class="line"><span class="keyword">if</span> (tmp&lt;rets&amp;&amp;deg[x]&gt;<span class="number">1</span>) rets=tmp,ret=x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> src)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> son=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x],y;i;i=nxt[i])</div><div class="line"><span class="keyword">if</span> ((y=tov[i])!=fa[x]) fa[y]=x,dfs(y,src),++son;</div><div class="line"><span class="keyword">if</span> (!son) leaf[src].push_back(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">all=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">&#123;</div><div class="line">all+=cnt[i]=(<span class="keyword">int</span>)leaf[i].size();</div><div class="line"><span class="keyword">if</span> (cnt[i]) heap.insert(i);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,all+<span class="number">1</span>&gt;&gt;<span class="number">1</span>);</div><div class="line"><span class="keyword">for</span> (;!heap.empty();)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> x=*heap.begin();heap.erase(heap.begin());</div><div class="line"><span class="keyword">if</span> (heap.empty())</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> y=leaf[x][--cnt[x]];</div><div class="line"><span class="keyword">if</span> (fa[y]==rt)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> z=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (z=<span class="number">1</span>;z&lt;=n;++z) <span class="keyword">if</span> (z!=y&amp;&amp;fa[z]==rt) <span class="keyword">break</span>;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,y,z);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,y,rt);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> y=*heap.begin();heap.erase(heap.begin());</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,leaf[x][--cnt[x]],leaf[y][--cnt[y]]);</div><div class="line"><span class="keyword">if</span> (cnt[y]) heap.insert(y);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (cnt[x]) heap.insert(x);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"network.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"network.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">n=read();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;++i) x=read(),y=read(),insert(x,y),insert(y,x),++deg[x],++deg[y];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;!rt&amp;&amp;i&lt;=n;++i) <span class="keyword">if</span> (deg[i]&gt;<span class="number">1</span>) rt=i;</div><div class="line">fa[rt=core(rt)]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[rt],y;i;i=nxt[i]) fa[y=tov[i]]=rt,dfs(y,y);</div><div class="line">calc();</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给定一颗$n$个点的无根树，求最少加多少条边使形成的图形任意删除一条边后都联通，边是无向的。&lt;br&gt;输出最少加边数和任意一种加边方案。注意不能加已出现的边。&lt;/p&gt;
&lt;p&gt;$3\leq n\leq 5\times10^5$&lt;br&gt;
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="BZOJ" scheme="http://yoursite.com/tags/BZOJ/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="LOJ" scheme="http://yoursite.com/tags/LOJ/"/>
    
      <category term="Baltic" scheme="http://yoursite.com/tags/Baltic/"/>
    
      <category term="树的重心" scheme="http://yoursite.com/tags/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83/"/>
    
      <category term="归纳" scheme="http://yoursite.com/tags/%E5%BD%92%E7%BA%B3/"/>
    
  </entry>
  
  <entry>
    <title>AGC013-E Placing Squares</title>
    <link href="http://yoursite.com/2017/10/25/agc013-e/"/>
    <id>http://yoursite.com/2017/10/25/agc013-e/</id>
    <published>2017-10-25T13:27:07.000Z</published>
    <updated>2017-10-25T13:49:38.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给你一个大小为$m$的集合$S$。<br>对于一个所有数和为$n$的正整数序列$\{a_k\}$，如果$\exists 1\leq i\leq k,\sum_{j=1}^ia_i\in S$则该序列是非法的。<br>一个合法的序列的贡献是$\prod_{i=1}^ka_i^2$。给定$n,m$和$S$，请问所有合法的序列的贡献之和为多少，答案对$10^9+7$取模。</p><p>$1\leq n\leq 10^9,0\leq m\leq 10^5$<br>$\forall x\in S,1\leq x&lt; n$<br><a id="more"></a></p><hr><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>还有这种模型转换?.jpg<br>我们要做一个看起来很平凡但是一下子让题目变得无比简单的神转换。<br>你有$n$个格子排成一排，你要放一些隔板和红蓝两种颜色的球，满足以下条件：</p><ol><li>隔板必须放在格子的左右边界，第一个格子左边和第$n$个格子右边一定有隔板</li><li>如果$i\in S$，则格子$i$与$i+1$之间的间隙不可以放置隔板</li><li>一个格子可以放任意数量任意颜色的球（两种颜色同时放在一格也是可以的）</li><li>一个隔板和它前/后相邻隔板之间必须恰好有一个红球、一个蓝球</li></ol><p>求所有放置的方案数。<br>这个问题显然和原问题等价。然后我们就可以设$f_{i,j}$表示考虑到第$i$个格子，在最后一个隔板后面放置了$j$个球的方案数，转移方程十分好写。<br>显然能新放隔板和不能新放隔板的转移是两个固定的矩阵。对于集合中相邻两个数之间的空隙，我们使用矩阵快速幂来优化这个转移的过程就好了。<br>时间复杂度$O(m\log n)$。</p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">100005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> P=<span class="number">1000000007</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> r,c;</div><div class="line"><span class="keyword">int</span> num[<span class="number">3</span>][<span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="title">matrix</span> <span class="params">()</span></span>&#123;r=c=<span class="number">3</span>,<span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span> num),num[<span class="number">0</span>][<span class="number">0</span>]=num[<span class="number">1</span>][<span class="number">1</span>]=num[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> matrix <span class="keyword">operator</span>*(matrix <span class="keyword">const</span> x)<span class="keyword">const</span></div><div class="line">&#123;</div><div class="line">matrix ret;</div><div class="line">ret.r=r,ret.c=x.c,<span class="built_in">memset</span>(ret.num,<span class="number">0</span>,<span class="keyword">sizeof</span> ret.num);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ret.r;++i)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ret.c;++j)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;c;++k)</div><div class="line">(ret.num[i][j]+=<span class="number">1l</span>l*num[i][k]*x.num[k][j]%P)%=P;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line">&#125;trs,trs_,f;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> matrix <span class="keyword">operator</span>^(matrix x,<span class="keyword">int</span> y)</div><div class="line">&#123;</div><div class="line">matrix ret=matrix();</div><div class="line"><span class="keyword">for</span> (;y;y&gt;&gt;=<span class="number">1</span>,x=x*x) <span class="keyword">if</span> (y&amp;<span class="number">1</span>) ret=ret*x;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> x[M];</div><div class="line"><span class="keyword">int</span> n,m,ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">trs.r=trs.c=<span class="number">3</span>;</div><div class="line">trs.num[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,trs.num[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>,trs.num[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">trs.num[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">2</span>,trs.num[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>,trs.num[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">2</span>;</div><div class="line">trs.num[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">1</span>,trs.num[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>,trs.num[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">2</span>;</div><div class="line">trs_.r=trs_.c=<span class="number">3</span>;</div><div class="line">trs_.num[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,trs_.num[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>,trs_.num[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">trs_.num[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">2</span>,trs_.num[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>,trs_.num[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">trs_.num[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">1</span>,trs_.num[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>,trs_.num[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</div><div class="line">f.r=<span class="number">1</span>,f.c=<span class="number">3</span>,f.num[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,f.num[<span class="number">0</span>][<span class="number">1</span>]=f.num[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">0</span>;</div><div class="line">x[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) f=f*(trs^(x[i]-x[i<span class="number">-1</span>]-(i&gt;<span class="number">1</span>)))*trs_;</div><div class="line">f=f*(trs^(n-x[m]-(m&gt;<span class="number">0</span>)));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"placing.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"placing.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">n=read(),m=read();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) x[i]=read();</div><div class="line">calc(),<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f.num[<span class="number">0</span>][<span class="number">2</span>]);</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给你一个大小为$m$的集合$S$。&lt;br&gt;对于一个所有数和为$n$的正整数序列$\{a_k\}$，如果$\exists 1\leq i\leq k,\sum_{j=1}^ia_i\in S$则该序列是非法的。&lt;br&gt;一个合法的序列的贡献是$\prod_{i=1}^ka_i^2$。给定$n,m$和$S$，请问所有合法的序列的贡献之和为多少，答案对$10^9+7$取模。&lt;/p&gt;
&lt;p&gt;$1\leq n\leq 10^9,0\leq m\leq 10^5$&lt;br&gt;$\forall x\in S,1\leq x&amp;lt; n$&lt;br&gt;
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="AtCoder" scheme="http://yoursite.com/tags/AtCoder/"/>
    
      <category term="矩阵" scheme="http://yoursite.com/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="计数类问题" scheme="http://yoursite.com/tags/%E8%AE%A1%E6%95%B0%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
    
      <category term="普通动态规划" scheme="http://yoursite.com/tags/%E6%99%AE%E9%80%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Fast Walsh-Hadamard Transform (in Base $K$)</title>
    <link href="http://yoursite.com/2017/10/21/fast-Walsh-Hadamard-transform/"/>
    <id>http://yoursite.com/2017/10/21/fast-Walsh-Hadamard-transform/</id>
    <published>2017-10-21T07:52:27.000Z</published>
    <updated>2017-10-21T14:21:45.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Fast Walsh-Hadamard Transform(FWT)是用来解决一类二($K$)进制运算卷积问题的快速算法，可以理解为每一维大小为$2$($K$)的高维快速傅里叶变换。这类问题的一般形式是，给定$A$和$B$，求出$C$满足：<br>$$<br>C_i=\sum_{j\otimes k=i}A_jB_k<br>$$其中$\otimes$是一种二($K$)进制运算。<br>本文将从回顾FFT开始，深入理解FFT的原理，然后再引出二进制的FWT。讨论FWT时，我们先会介绍$or$和$and$运算卷积两种较为简单的情况，然后进一步介绍$xor$的复杂情况。最后我们会将$xor$运算卷积推广至$K$进制的情况。<br><a id="more"></a></p><hr><h1 id="FFT原理"><a href="#FFT原理" class="headerlink" title="FFT原理"></a>FFT原理</h1><p>笔者之前在学习FFT的时候，存在一个理解误区，就是以为FFT实质上就是一种用来解决多项式乘法的特殊插值法：将$\omega_n^0…\omega_n^{n-1}$这个$n$个主$n$次单位复数根代入求点值，然后插值回来。实质上，我们知道多项式乘法得到的多项式次数界是相乘两个多项式之和的规模，如果用来求点值的数只有相乘多项式的次数界个数，怎么可能求得积的多项式呢？<br>相信天机清妙的读者都知道笔者犯了一个概念性错误，FFT实质上并不是在直接求解多项式相乘，它实质上是在做一个循环卷积，溢出的次数会自动累加到其模次数界对应的位置上。<br>为什么FFT是循环卷积呢？我们令$DFT(A)_i$表示$A$这个多项式在$\omega_n^i$处的点值，那么FFT的实质上是依赖于这样一个原理：<br>$$DFT(A)_xDFT(B)_x=DFT(C)_x$$令$\omega=\omega_n^x$，我们将这条式子展开：<br>$$\begin{align}\sum_{i=0}^{n-1}A_i\omega^i\sum_{j=0}^{n-1}B_j\omega^j&=\sum_{k=0}^{n-1}C_k\omega^k\\&=\sum_{k=0}^{n-1}\sum_{(i+j)\ \mathrm{mod}\ n=k}A_iB_j\omega^k\end{align}$$为了使对应项系数恒相等，我们需要有$\omega^i\omega^j=\omega^k$。<br>由于我们选择的是主$n$次单位复数根，正好$\omega^i\omega^j=\omega^{i+j}=\omega_n^{(i+j)x}=\omega_n^{kx}=\omega^k$。<br>这就是FFT算法的一个重要依据。</p><hr><h1 id="快速变换的一般思路"><a href="#快速变换的一般思路" class="headerlink" title="快速变换的一般思路"></a>快速变换的一般思路</h1><p>有了上面FFT算法的思路，我们来考虑快速卷积运算的一般思路<br>定义二元函数$f(i,j)$，定义<br>$$<br>trans(A)_i=\sum_{j=0}^{n-1}A_if(i,j)<br>$$我们需要针对给定运算的规律，构造函数$f$使其满足<br>$$trans(A)_xtrans(B)_x=trans(C)_x$$在FFT中，我们选择了主$n$次单位复数根：$f(i,j)=\omega_n^{ij}$。</p><p>当然了，这个$f$函数当然不只是能够满足上面条件就够了，还要方便我计算，不然在时间复杂度上就没有任何改观了。在FFT中，$n$个主$n$次复数单位根的平方本质上恰好是$n/2$个主$n/2$次单位复数根，于是就可以通过分治策略将时间复杂度降至$O(n\log n)$。但是不同运算有不同的性质，对于快速计算的方法我们必须具体情况具体分析。</p><hr><h1 id="FWT原理"><a href="#FWT原理" class="headerlink" title="FWT原理"></a>FWT原理</h1><p>我们先讨论二进制的情况。</p><h2 id="或运算、与运算卷积"><a href="#或运算、与运算卷积" class="headerlink" title="或运算、与运算卷积"></a>或运算、与运算卷积</h2><p>首先构造函数$f$使其满足上面所讲的式子。<br>注意到一组比较显然的事实：<br>$$<br>\begin{align}<br>i\ \mathrm{or}\ k=k,j\ \mathrm{or}\ k=k&amp;\Rightarrow \left(i\ \mathrm{or}\ j\right)\ \mathrm{or}\ k=k\\<br>i\ \mathrm{and}\ k=k,j\ \mathrm{and}\ k=k&amp;\Rightarrow \left(i\ \mathrm{and}\ j\right)\ \mathrm{and}\ k=k<br>\end{align}<br>$$对于与运算，我们定义$f(i,j)=[i\ \mathrm{and}\ j=i]$；对于或运算我们定义$f(i,j)=[i\ \mathrm{and}\ j=j]$。容易验证，这样的$f$可以满足之前的式子。<br>考虑如何计算这个东西？其实它的本质就是给定$\{a_n\}$，让你计算$\{b_n\}$满足<br>$$<br>b_i=\sum_{i\subseteq j}a_j<br>$$或者<br>$$<br>b_i=\sum_{j\subseteq i}a_i<br>$$这是一个很经典的问题。既然是二进制运算，我们就考虑按位分治。<br>假设我们现在要算出$[l,r)$区间的答案，$[l,mid)$区间二进制首位都是$0$，$[mid,r)$区间二进制首位都为$1$。而右区间的某个数相比左区间的对应位置的二进制（在当前考虑的这么多位二进制下）只是在最高位多了$1$，也就是说左边那个状态是右边的子集。然后我们就可以相应地把右（左）边的值加到左（右）边。<br>这样我们就可以在$O(n\log n)$的时间复杂度下完成FWT的正过程(DWT)，那么怎么做逆过程(IDWT)呢？很简单，正过程的时候我们是把其中一项加到另一项，逆过来的时候我们对应地将一项减去另一项就可以解出来了，大家可以自己推算一下。那我们要不要严格按照正过程的倒序（也就是先计算当前区间再递归两边）来执行呢？其实不用，因为这样我只不过是在逆过程时将高低位颠倒考虑而已，对最后结果没有影响，也就是我们只需要在正过程上稍加改动罢了。<br>总的时间复杂度就是$O(n\log n)$的。注意到这个过程只有加减运算，因此在模意义下也不受模数限制。</p><p>代码实现：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DWT</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> sig)</span>  <span class="comment">//sig:1(DWT)/-1(IDWT)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">2</span>;l&lt;=n;l&lt;&lt;=<span class="number">1</span>)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,h=l&gt;&gt;<span class="number">1</span>;i&lt;n;i+=l)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;h;++j)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> u=a[i+j],v=a[i+j+h];</div><div class="line"><span class="comment">//and: a[i+j]=u+v*sig;</span></div><div class="line"><span class="comment">//or: a[i+j+d]=v+u*sig;</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="异或卷积"><a href="#异或卷积" class="headerlink" title="异或卷积"></a>异或卷积</h2><p>终于说到本博客的重点：异或卷积。异或卷积相比其它卷积构造相对复杂一些，但实现起来也是差不多的。<br>异或运算的$f$基于这样一个事实：我们令$bitcount(s)$表示$s$的二进制状态中$1$的个数，那么一定有$bitcount(i\ \mathrm{and}\ k)$的奇偶性异或$bitcount(j\ \mathrm{and}\ k)$的奇偶性等于$bitcount\left((i\ \mathrm{xor}\ j)\ \mathrm{and}\ k\right)$的奇偶性。<br>于是我们定义$f(i,j)=(-1)^{bitcount(i\ \mathrm{and}\ j)}$，这样我们的$f$就满足要求了。<br>这个东西怎么快速计算呢？依然按位考虑，我们令$f_0$表示一个元素在$[l,mid)$中对应位置的值，$f_1$表示在$[mid,r)$区间中对应位置的值。对于一个位于$[l,mid)$的元素，那么它的$f$显然等于$f_0+f_1$，因为它最高位加入的数是$0$，所以不论原本的值来自那一边，都不会影响奇偶性。而位于$[mid,r)$的元素就是$f=f_0-f_1$，因为在右半边两个二进制最高位都加入了$1$，会导致奇偶性变化，而左边就不会。<br>至于逆变换，考虑到我们相当于知道了$a+b$和$a-b$，那么只需要简单的加减消元即可以解出两个值。<br>时间复杂度是$O(n\log n)$的。注意到这个过程虽然有除以$2$的运算，但是即使题目要求对一个一般的数取模，在通常情况下我们还是可以消除它的影响。因为$\frac xa\ \mathrm{mod}\ p=\frac{x\ \mathrm{mod}\ pa}a$，我们直接将模数乘上次数界（也就是$2$的某次幂），在做逆过程的时候不除$2$，最后将答案除以次数界就好了。<br>时间复杂度$O(n\log n)$。</p><p>代码实现（没有了除以$2$正逆变换没有区别）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DWT</span><span class="params">(<span class="keyword">int</span> *a)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">2</span>;l&lt;=n;l&lt;&lt;=<span class="number">1</span>)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,h=l&gt;&gt;<span class="number">1</span>;i&lt;n;i+=l)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;h;++j)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> u=a[i+j],v=a[i+j+h];</div><div class="line">a[i+j]=u+v,a[i+j+h]=u-v;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="K-进制下的异或卷积"><a href="#K-进制下的异或卷积" class="headerlink" title="$K$进制下的异或卷积"></a>$K$进制下的异或卷积</h2><p>考虑沿袭二进制下的思路，对于二进制我们定义了$f(i,j)=(-1)^{bitcount(i\ \mathrm{and}\ j)}$。现在我们考虑一下这个东西在推广以后的本质，其实这里面的$\mathrm{and}$就是$K$进制下的不进位乘法，所谓$bitcount(s)$其实就是将所有的位加起来对$K$取模。然后我们希望能有一个相关的特征性的函数$g$，能体现出这$K$个可能的取值，满足$g(i)g(j)=g\left((i+j)\ \mathrm{mod} K\right)$。<br>相信大家都发现FFT中的主$n$次单位复数根可以胜任此位，也就是我们令$\omega$为主$K$次单位复数根，那么$g(i)=\omega^i$，也就是$f(i,j)=\omega^{bitcount_k(i\ \mathrm{and}_k\ j)}$。<br>那我们这样怎么快速做正变换呢？和二进制其实是类似的，对于区间$[l,r)$，我们按照最高位将其分成$K$个长度相等的区间，然后考虑在这些区间中位于同样对应位置的数。<br>假设这些数是$F_0,F_1,…,F_{K-2},F_{K-1}$，假设我们要的值是$f_0,f_1,…,f_{K-2},f_{K-1}$，那么就有<br>$$<br>f_i=\sum_{j=0}^{K-1}F_j\omega^{ij}<br>$$逆变换怎么做呢？我们考虑对于一个分治区间，实质上我们进行的是类似FFT过程的一个矩阵乘法：<br>$$<br>\begin{pmatrix}<br>1 &amp; 1 &amp; 1 &amp; \cdots &amp; 1 \\<br>1 &amp; \omega &amp; \omega^2 &amp; \cdots &amp; \omega^{K-1} \\<br>1 &amp; \omega^2 &amp; \omega^4 &amp; \cdots &amp; \omega^{2(K-1)} \\<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>1 &amp; \omega^{K-1} &amp; \omega^{(K-1)2} &amp; \cdots &amp; \omega^{(K-1)(K-1)}<br>\end{pmatrix}\begin{pmatrix}<br>F_0\\<br>F_1\\<br>F_2\\<br>\vdots\\<br>F_{K-1}<br>\end{pmatrix}=\begin{pmatrix}<br>f_0\\<br>f_1\\<br>f_2\\<br>\vdots\\<br>f_{K-1}<br>\end{pmatrix}<br>$$我们只需要在等式两边左乘一个系数矩阵的逆矩阵就好了，学过FFT的都知道，根据求和引理可以验证逆矩阵：<br>$$<br>\begin{pmatrix}<br>\frac 1K &amp; \frac 1K &amp; \frac 1K &amp; \cdots &amp; \frac 1K \\<br>\frac 1K &amp; \frac{\omega^{-1}}K &amp; \frac{\omega^{-2}}K &amp; \cdots &amp; \frac{\omega^{-(K-1)}}K \\<br>\frac 1K &amp; \frac{\omega^{-2}}K &amp; \frac{\omega^{-4}}K &amp; \cdots &amp; \frac{\omega^{-2(K-1)}}K \\<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>\frac 1K &amp; \frac{\omega^{-(K-1)}}K &amp; \frac{\omega^{-(K-1)2}}K &amp; \cdots &amp; \frac{\omega^{-(K-1)(K-1)}}K<br>\end{pmatrix}<br>$$因此我们在逆过程的时候只需要把次幂取相反数，最后再除去次数界就好了。<br>相信看到这里大家都明白为什么说“（$K$进制下）FWT为每一维大小为$2$($K$)的高维快速傅里叶变换了”。<br>可以用类似的实现过程，复杂度是$T(n)=KT\left(\frac nK\right)+O(Kn)$，即$O(Kn\log_K n)$。</p><p>对于（对质数）取模的情况，我们考虑原根$g$。显然类似NTT那样取$\omega=g^{\frac{P-1}K}$，就可以做到主$K$次单位复数根的效果。不过这样做比起NTT对模数的要求就还要更苛刻一些了，它必须是$K$的某一个倍数加$1$。$330301441$这个质数是能够对$10$以内的所有$K$做$K$进制异或卷积的。</p><p>代码实现（这次贴一个比较完整的）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DWT</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> sig)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=K;l&lt;=len;l*=K)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) b[i]=a[i];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,h=l/K;i&lt;len;i+=l)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;h;++j)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;K;++k)</div><div class="line">&#123;</div><div class="line">a[i+j+k*h]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k_=<span class="number">0</span>;k_&lt;K;++k_) (a[i+j+k*h]+=<span class="number">1l</span>l*b[i+j+k_*h]*POW[(k*k_%K*sig+K)%K]%P)%=P;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">for</span> (len=<span class="number">1</span>;len&lt;=mx;len*=K);</div><div class="line">POW[<span class="number">0</span>]=<span class="number">1</span>,omega=quick_power(G,(P<span class="number">-1</span>)/K);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;++i) POW[i]=<span class="number">1l</span>l*POW[i<span class="number">-1</span>]*omega%P;</div><div class="line">DWT(A,<span class="number">1</span>),DWT(B,<span class="number">1</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) C[i]=<span class="number">1l</span>l*A[i]*B[i]%P;</div><div class="line">DWT(C,<span class="number">-1</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,inv=quick_power(len,P<span class="number">-2</span>);i&lt;len;++i) C[i]=<span class="number">1l</span>l*C[i]*inv%P;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次笔者是为了做掉CC October Long Challenge 2017里面的那一道<a href="https://www.codechef.com/problems/XORTREEH" target="_blank" rel="external">XORTREEH</a>才突击学习一下FWT的，收获还挺大的，首先纠正了自己对FFT的错误认识，其次对于这一类快速变换算法的基本原理有了更加深刻的理解。将二进制的异或卷积推广到$K$进制下的工作是笔者独立完成的，可以说是受益匪浅了，起码印象深刻以后都不怎么会忘记了，大家也可以试着自己搞一搞。<br><del>好久没有写过这么长的博客了……</del></p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.csdn.net/neither_nor/article/details/60335099" target="_blank" rel="external">neither_nor, FWT 详解 知识点</a><br><a href="http://www.cnblogs.com/y-clever/p/6875743.html" target="_blank" rel="external">_rqy, Fast Walsh-Hadamard Transform——快速沃尔什变换</a><br><a href="http://www.cnblogs.com/y-clever/p/6979925.html" target="_blank" rel="external">_rqy, Fast Walsh-Hadamard Transform——快速沃尔什变换（二）</a><br><a href="http://picks.logdown.com/posts/179290-fast-walsh-hadamard-transform" target="_blank" rel="external">Picks, Fast Walsh-Hadamard Transform</a><br>吕凯风, 集合幂级数的性质与应用及其快速算法, 2015年信息学奥林匹克中国国家队候选队员论文集</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Fast Walsh-Hadamard Transform(FWT)是用来解决一类二($K$)进制运算卷积问题的快速算法，可以理解为每一维大小为$2$($K$)的高维快速傅里叶变换。这类问题的一般形式是，给定$A$和$B$，求出$C$满足：&lt;br&gt;$$&lt;br&gt;C_i=\sum_{j\otimes k=i}A_jB_k&lt;br&gt;$$其中$\otimes$是一种二($K$)进制运算。&lt;br&gt;本文将从回顾FFT开始，深入理解FFT的原理，然后再引出二进制的FWT。讨论FWT时，我们先会介绍$or$和$and$运算卷积两种较为简单的情况，然后进一步介绍$xor$的复杂情况。最后我们会将$xor$运算卷积推广至$K$进制的情况。&lt;br&gt;
    
    </summary>
    
      <category term="学习小记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="矩阵" scheme="http://yoursite.com/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="FFT/NTT/FWT" scheme="http://yoursite.com/tags/FFT-NTT-FWT/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="原根" scheme="http://yoursite.com/tags/%E5%8E%9F%E6%A0%B9/"/>
    
  </entry>
  
  <entry>
    <title>CodeChef October Long Challenge 2017 OCT17 Solutions</title>
    <link href="http://yoursite.com/2017/10/20/codechef-OCT17/"/>
    <id>http://yoursite.com/2017/10/20/codechef-OCT17/</id>
    <published>2017-10-20T14:18:38.000Z</published>
    <updated>2017-10-21T00:27:04.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>弱鸡选手第一次认真打CC马拉松，然而多项式菜不会异或卷积，题答水平又低，于是只能做$8$道题……<a id="more"></a><br>让我们跳过傻逼题</p><hr><h1 id="CHEFGP"><a href="#CHEFGP" class="headerlink" title="CHEFGP"></a>CHEFGP</h1><p>首先你要发现一个性质，一定存在一种最优解使得kiwi fruits只会派给某一种水果的人。<br>然后就对着这个性质瞎构造了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100005</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt[N];</div><div class="line"><span class="keyword">char</span> str[N],res[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> T,n,x,y,a,b,ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">bool</span> sig)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=a;++i) cnt[i]=<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> b_=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;b_&lt;b&amp;&amp;i&lt;=a;++i) <span class="keyword">if</span> (!(i%x)) ++cnt[i],++b_;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cur=<span class="number">0</span>;b_&lt;b&amp;&amp;cur&lt;=a;)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (;cur&lt;=a&amp;&amp;cnt[cur]==y;++cur);</div><div class="line"><span class="keyword">if</span> (cur&lt;=a) ++cnt[cur],++b_;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (b_&lt;b) <span class="keyword">return</span>;</div><div class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,l=<span class="number">1</span>;i&lt;=a;++i)</div><div class="line">&#123;</div><div class="line">tot+=i-l&gt;=x;</div><div class="line"><span class="keyword">if</span> (i-l&gt;=x) l=i;</div><div class="line"><span class="keyword">if</span> (cnt[i]) l=i+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (tot&lt;ans)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt[<span class="number">0</span>];++i) res[len++]=sig?<span class="string">'a'</span>:<span class="string">'b'</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,l=<span class="number">1</span>;i&lt;=a;++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (i-l&gt;=x) res[len++]=<span class="string">'*'</span>;</div><div class="line">res[len++]=sig?<span class="string">'b'</span>:<span class="string">'a'</span>;</div><div class="line"><span class="keyword">if</span> (i-l&gt;=x) l=i;</div><div class="line"><span class="keyword">if</span> (cnt[i]) l=i+<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt[i];++j) res[len++]=sig?<span class="string">'a'</span>:<span class="string">'b'</span>;</div><div class="line">&#125;</div><div class="line">res[len]=<span class="string">'\0'</span>,ans=tot;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"chefgp.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"chefgp.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">for</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);T--;)</div><div class="line">&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>,str,&amp;x,&amp;y),a=b=<span class="number">0</span>,n=<span class="built_in">strlen</span>(str);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) a+=str[i]==<span class="string">'a'</span>,b+=str[i]==<span class="string">'b'</span>;</div><div class="line">ans=a+b,work(<span class="number">0</span>),swap(a,b),swap(x,y),work(<span class="number">1</span>),<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,res);</div><div class="line">&#125;</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h1 id="CHEFCCYL"><a href="#CHEFCCYL" class="headerlink" title="CHEFCCYL"></a>CHEFCCYL</h1><p>破环为链，前缀后缀搞一下。<br>注意不要被二元环坑了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> buf[<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</div><div class="line"><span class="keyword">for</span> (;x;x/=<span class="number">10</span>) buf[++buf[<span class="number">0</span>]]=x%<span class="number">10</span>;</div><div class="line"><span class="keyword">if</span> (!buf[<span class="number">0</span>]) buf[++buf[<span class="number">0</span>]]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;buf[<span class="number">0</span>];<span class="built_in">putchar</span>(<span class="string">'0'</span>+buf[buf[<span class="number">0</span>]--]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100005</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> pre[N],suf[N],st[N],en[N],e[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cir[N],sum[N];</div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"><span class="keyword">int</span> T,n,q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> cid,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (x&gt;y) swap(x,y);</div><div class="line"><span class="keyword">return</span> min(sum[cid][y<span class="number">-1</span>]-sum[cid][x<span class="number">-1</span>],sum[cid][x<span class="number">-1</span>]+sum[cid][a[cid]]-sum[cid][y<span class="number">-1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> stc,<span class="keyword">int</span> x,<span class="keyword">int</span> enc,<span class="keyword">int</span> y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (stc&gt;enc) swap(stc,enc),swap(x,y);</div><div class="line"><span class="keyword">return</span> min(pre[stc]+suf[enc]+e[n]+dist(stc,st[stc],x)+dist(enc,en[enc],y),pre[enc]-pre[stc]-dist(stc,st[stc],en[stc])+dist(stc,en[stc],x)+dist(enc,st[enc],y));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">pre[<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) pre[i]=pre[i<span class="number">-1</span>]+dist(i<span class="number">-1</span>,st[i<span class="number">-1</span>],en[i<span class="number">-1</span>])+e[i<span class="number">-1</span>];</div><div class="line">suf[n]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i) suf[i]=suf[i+<span class="number">1</span>]+dist(i+<span class="number">1</span>,st[i+<span class="number">1</span>],en[i+<span class="number">1</span>])+e[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"chefccyl.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"chefccyl.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">for</span> (T=read();T--;)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) cir[i].resize(<span class="number">0</span>),sum[i].resize(<span class="number">0</span>),cir[i].shrink_to_fit(),sum[i].shrink_to_fit();</div><div class="line">n=read(),q=read();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">&#123;</div><div class="line">a[i]=read(),cir[i].push_back(a[i]);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=a[i];++j) cir[i].push_back(read());</div><div class="line">sum[i].push_back(<span class="number">0</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=a[i];++j) sum[i].push_back(sum[i][j<span class="number">-1</span>]+cir[i][j]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) en[i]=read(),st[i%n+<span class="number">1</span>]=read(),e[i]=read();</div><div class="line">prepare();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v1,v2,c1,c2;q--;<span class="built_in">putchar</span>(<span class="string">'\n'</span>)) v1=read(),c1=read(),v2=read(),c2=read(),write(dist(c1,v1,c2,v2));</div><div class="line">&#125;</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h1 id="MARRAYS"><a href="#MARRAYS" class="headerlink" title="MARRAYS"></a>MARRAYS</h1><p>把绝对值拆开来考虑，一个一个序列$dp$就好了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> buf[<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(LL x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</div><div class="line"><span class="keyword">for</span> (;x;x/=<span class="number">10</span>) buf[++buf[<span class="number">0</span>]]=x%<span class="number">10</span>;</div><div class="line"><span class="keyword">if</span> (!buf[<span class="number">0</span>]) buf[++buf[<span class="number">0</span>]]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;buf[<span class="number">0</span>];<span class="built_in">putchar</span>(<span class="string">'0'</span>+buf[buf[<span class="number">0</span>]--]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000005</span>;</div><div class="line"><span class="keyword">const</span> LL INF=LLONG_MAX/<span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[N],id[N],len[N];</div><div class="line">LL pre[N],suf[N];</div><div class="line">LL f[N][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> T,n;</div><div class="line">LL ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> a[x]&lt;a[y];&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"marrays.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"marrays.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">for</span> (T=read();T--;)</div><div class="line">&#123;</div><div class="line">n=read(),len[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,cur=<span class="number">0</span>;i&lt;=n;cur+=len[i++])</div><div class="line">&#123;</div><div class="line">len[<span class="number">0</span>]+=len[i]=read();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=cur+<span class="number">1</span>;j&lt;=cur+len[i];++j) a[j]=read();</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len[<span class="number">1</span>];++i) f[i][<span class="number">0</span>]=-a[i],f[i][<span class="number">1</span>]=a[i];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>,cur=len[<span class="number">1</span>];i&lt;=n;cur+=len[i++])</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=cur-len[i<span class="number">-1</span>]+<span class="number">1</span>;j&lt;=cur;++j) id[j]=j;</div><div class="line">sort(id+cur-len[i<span class="number">-1</span>]+<span class="number">1</span>,id+cur+<span class="number">1</span>,cmp);</div><div class="line">pre[cur-len[i<span class="number">-1</span>]]=-INF,suf[cur+<span class="number">1</span>]=-INF;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=cur-len[i<span class="number">-1</span>]+<span class="number">1</span>;j&lt;=cur;++j) pre[j]=max(pre[j<span class="number">-1</span>],f[id[j]][<span class="number">0</span>]);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=cur;j&gt;=cur-len[i<span class="number">-1</span>]+<span class="number">1</span>;--j) suf[j]=max(suf[j+<span class="number">1</span>],f[id[j]][<span class="number">1</span>]);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=cur+<span class="number">1</span>;j&lt;=cur+len[i];++j)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> ptr1=cur-len[i<span class="number">-1</span>],ptr2=cur+<span class="number">1</span>,l=cur-len[i<span class="number">-1</span>]+<span class="number">1</span>,r=cur;<span class="comment">//ptr1 the last element smaller than(or equal to) a[j],ptr2 the first element greater than(or equal to) a[j]</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> mid;l&lt;=r;)</div><div class="line">&#123;</div><div class="line">mid=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (a[id[mid]]&lt;=a[j]) l=(ptr1=mid)+<span class="number">1</span>;</div><div class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line">l=cur-len[i<span class="number">-1</span>]+<span class="number">1</span>,r=cur;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> mid;l&lt;=r;)</div><div class="line">&#123;</div><div class="line">mid=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (a[id[mid]]&gt;=a[j]) r=(ptr2=mid)<span class="number">-1</span>;</div><div class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">LL x=max(<span class="number">1l</span>l*(i<span class="number">-1</span>)*a[j]+pre[ptr1],suf[ptr2]<span class="number">-1l</span>l*(i<span class="number">-1</span>)*a[j]);</div><div class="line"><span class="keyword">int</span> j_=j<span class="number">-1</span>==cur?cur+len[i]:j<span class="number">-1</span>;</div><div class="line">f[j_][<span class="number">0</span>]=x<span class="number">-1l</span>l*i*a[j_],f[j_][<span class="number">1</span>]=x+<span class="number">1l</span>l*i*a[j_];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">ans=-INF;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=len[<span class="number">0</span>]-len[n]+<span class="number">1</span>;i&lt;=len[<span class="number">0</span>];++i) ans=max(ans,f[i][<span class="number">0</span>]+<span class="number">1l</span>l*n*a[i]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">&#125;</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="SHTARR"><a href="#SHTARR" class="headerlink" title="SHTARR"></a>SHTARR</h1><p>这不是在天朝烂大街的套路吗？<br>这题本质就是求一段区间组成的单调栈中，值在一定区间内的数的个数。然后我们可以差分一下。<br>然后就是楼房重建套路了。<br>时间复杂度$O(q\log^2n)$。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> buf[<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</div><div class="line"><span class="keyword">for</span> (;x;x/=<span class="number">10</span>) buf[++buf[<span class="number">0</span>]]=x%<span class="number">10</span>;</div><div class="line"><span class="keyword">if</span> (!buf[<span class="number">0</span>]) buf[++buf[<span class="number">0</span>]]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;buf[<span class="number">0</span>];<span class="built_in">putchar</span>(<span class="string">'0'</span>+buf[buf[<span class="number">0</span>]--]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000005</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x&gt;y?x:y;&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"><span class="keyword">int</span> T,n,q;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> cnt[N&lt;&lt;<span class="number">2</span>],mx[N&lt;&lt;<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">querymax</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> st,<span class="keyword">int</span> en,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (st==l&amp;&amp;en==r) <span class="keyword">return</span> mx[x];</div><div class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (en&lt;=mid) <span class="keyword">return</span> querymax(x&lt;&lt;<span class="number">1</span>,st,en,l,mid);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mid+<span class="number">1</span>&lt;=st) <span class="keyword">return</span> querymax(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,st,en,mid+<span class="number">1</span>,r);</div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> max(querymax(x&lt;&lt;<span class="number">1</span>,st,mid,l,mid),querymax(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,en,mid+<span class="number">1</span>,r));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">querycnt</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> st,<span class="keyword">int</span> en,<span class="keyword">int</span> l,<span class="keyword">int</span> r,db p)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (l==r) <span class="keyword">return</span> (mx[x]&gt;p)+<span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;<span class="keyword">bool</span> cvr=st==l&amp;&amp;en==r;</div><div class="line"><span class="keyword">if</span> (en&lt;=mid) <span class="keyword">return</span> querycnt(x&lt;&lt;<span class="number">1</span>,st,en,l,mid,p);</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mid+<span class="number">1</span>&lt;=st) <span class="keyword">return</span> querycnt(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,st,en,mid+<span class="number">1</span>,r,p);</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> rmx=cvr?mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]:querymax(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,en,mid+<span class="number">1</span>,r);</div><div class="line"><span class="keyword">if</span> (rmx&gt;p) <span class="keyword">return</span> (cvr?cnt[x]:querycnt(x&lt;&lt;<span class="number">1</span>,st,mid,l,mid,rmx))+querycnt(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,en,mid+<span class="number">1</span>,r,p)<span class="number">-1</span>;</div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> querycnt(x&lt;&lt;<span class="number">1</span>,st,mid,l,mid,p);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">mx[x]=max(mx[x&lt;&lt;<span class="number">1</span>],mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]),cnt[x]=querycnt(x&lt;&lt;<span class="number">1</span>,l,mid,l,mid,mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> delta)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (l==r)</div><div class="line">&#123;</div><div class="line">mx[x]+=delta;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (y&lt;=mid) modify(x&lt;&lt;<span class="number">1</span>,y,l,mid,delta);</div><div class="line"><span class="keyword">else</span> modify(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,y,mid+<span class="number">1</span>,r,delta);</div><div class="line">update(x,l,r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (l==r)</div><div class="line">&#123;</div><div class="line">mx[x]=a[n-l+<span class="number">1</span>];</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">build(x&lt;&lt;<span class="number">1</span>,l,mid),build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r),update(x,l,r);</div><div class="line">&#125;</div><div class="line">&#125;t;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"shtarr.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"shtarr.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">for</span> (T=read();T--;)</div><div class="line">&#123;</div><div class="line">n=read(),q=read();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=read();</div><div class="line">t.build(<span class="number">1</span>,<span class="number">1</span>,n);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> opt=getchar();</div><div class="line"><span class="keyword">for</span> (;opt!=<span class="string">'?'</span>&amp;&amp;opt!=<span class="string">'+'</span>;opt=getchar());</div><div class="line"><span class="keyword">if</span> (opt==<span class="string">'?'</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> x=read(),l=read(),r=read();</div><div class="line">write(t.querycnt(<span class="number">1</span>,<span class="number">1</span>,n-x+<span class="number">1</span>,<span class="number">1</span>,n,l<span class="number">-.5</span>)-t.querycnt(<span class="number">1</span>,<span class="number">1</span>,n-x+<span class="number">1</span>,<span class="number">1</span>,n,r<span class="number">-.5</span>)+(t.querymax(<span class="number">1</span>,<span class="number">1</span>,n-x+<span class="number">1</span>,<span class="number">1</span>,n)&gt;r<span class="number">-.5</span>)),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> x=read(),y=read();</div><div class="line">t.modify(<span class="number">1</span>,n-x+<span class="number">1</span>,<span class="number">1</span>,n,y);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h1 id="LKYEDGE"><a href="#LKYEDGE" class="headerlink" title="LKYEDGE"></a>LKYEDGE</h1><p>这题真的坑……<br>考虑枚举区间的左端点，然后计算每一条边第一次形成环的右端点最后更新$f(x)$。计算这个我们可以对左端点右边的所有边按照编号做一遍最小生成树。<br>然后从小到大枚举非树边，将两点树上路径上所有边的最小右端点标记为枚举的右端点，然后使用并查集将这些路径压缩起来，后面我们不再更新这些边。<br>然后时间复杂度就是$O(m^2\alpha(n))$的了。<br>于是你需要各种卡常特技，比如说我让左端点从右往左枚举，每次加入一条边，使用环切性质更新最小生成树。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="comment">//#include &lt;ctime&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> buf[<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(LL x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</div><div class="line"><span class="keyword">for</span> (;x;x/=<span class="number">10</span>) buf[++buf[<span class="number">0</span>]]=x%<span class="number">10</span>;</div><div class="line"><span class="keyword">if</span> (!buf[<span class="number">0</span>]) buf[++buf[<span class="number">0</span>]]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;buf[<span class="number">0</span>];<span class="built_in">putchar</span>(<span class="string">'0'</span>+buf[buf[<span class="number">0</span>]--]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> E=N&lt;&lt;<span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">5005</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> fa[N],anc[N],rk[N],eid[N],last[N],que[N],depth[N],top[N],vis[N],vis_[N],bid[N],mx[N];</div><div class="line"><span class="keyword">int</span> tov[E],pre[E],nxt[E],e[E];</div><div class="line"><span class="keyword">int</span> edge[M][<span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> used[M];</div><div class="line">LL f[M];</div><div class="line"><span class="keyword">int</span> T,m,n,tot,head,tail;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> son)</span></span>&#123;<span class="keyword">return</span> !fa[son]?son:fa[son]=getfather(fa[son]);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;tov[++tot]=y,e[tot]=z,nxt[tot]=last[x],pre[last[x]]=last[x]?tot:<span class="number">0</span>,pre[last[x]=tot]=<span class="number">0</span>;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;pre[y]?nxt[pre[y]]=nxt[y]:last[x]=nxt[y],nxt[y]?pre[nxt[y]]=pre[y]:<span class="number">0</span>;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (rk[x]&lt;rk[y]) x^=y^=x^=y;</div><div class="line">fa[y]=x,rk[x]+=rk[x]==rk[y];</div><div class="line"><span class="keyword">return</span> top[x]=depth[top[x]]&lt;depth[top[y]]?top[x]:top[y];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"lkyedge.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"lkyedge.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line"><span class="comment">//double tot1=0,tot2=0,tot3=0;clock_t tmp;</span></div><div class="line"><span class="keyword">for</span> (T=read();T--;)</div><div class="line">&#123;</div><div class="line">m=read(),n=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) edge[i][<span class="number">0</span>]=read(),edge[i][<span class="number">1</span>]=read(),n=max(max(edge[i][<span class="number">0</span>],edge[i][<span class="number">1</span>]),n),f[i]=used[i]=<span class="number">0</span>;</div><div class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis),<span class="built_in">memset</span>(vis_,<span class="number">0</span>,<span class="keyword">sizeof</span> vis_),tot=<span class="number">0</span>,<span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span> last);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) bid[i]=i;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=m,u,v;i&gt;=<span class="number">1</span>;--i)</div><div class="line">&#123;</div><div class="line"><span class="comment">//tmp=clock();</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;=m;++j) top[edge[j][<span class="number">0</span>]]=edge[j][<span class="number">0</span>],top[edge[j][<span class="number">1</span>]]=edge[j][<span class="number">1</span>];</div><div class="line">u=edge[i][<span class="number">0</span>],v=edge[i][<span class="number">1</span>],used[i]=<span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (bid[u]==bid[v])</div><div class="line">&#123;</div><div class="line">mx[que[tail=<span class="number">1</span>]=u]=head=<span class="number">0</span>,vis_[u]=i;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x,i_,y;head&lt;tail;)</div><div class="line"><span class="keyword">for</span> (i_=last[x=que[++head]];i_;i_=nxt[i_])</div><div class="line"><span class="keyword">if</span> (vis_[y=tov[i_]]!=i) mx[que[++tail]=y]=e[mx[x]]&gt;e[i_]?mx[x]:i_,vis_[y]=i;</div><div class="line"><span class="keyword">int</span> i_=mx[v],i__=i_&amp;<span class="number">1</span>?i_+<span class="number">1</span>:i_<span class="number">-1</span>,a=tov[i__],b=tov[i_];</div><div class="line">erase(a,i_),erase(b,i__),used[e[i_]]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">insert(u,v,i),insert(v,u,i);</div><div class="line"><span class="comment">//tot1+=((double)(clock()-tmp))/CLOCKS_PER_SEC,tmp=clock();</span></div><div class="line"><span class="comment">//for (int x=1;x&lt;=n;++x) top[x]=x;</span></div><div class="line">vis[u]=i,anc[que[tail=<span class="number">1</span>]=u]=<span class="number">0</span>,head=<span class="number">0</span>,depth[u]=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x,i_,y;head&lt;tail;)</div><div class="line"><span class="keyword">for</span> (i_=last[x=que[++head]],bid[x]=u;i_;i_=nxt[i_])</div><div class="line"><span class="keyword">if</span> (vis[y=tov[i_]]!=i) depth[y]=depth[anc[que[++tail]=y]=x]+<span class="number">1</span>,eid[y]=e[i_],vis[y]=i;</div><div class="line"><span class="comment">//tot2+=((double)(clock()-tmp))/CLOCKS_PER_SEC,tmp=clock();</span></div><div class="line"><span class="built_in">memset</span>(fa,<span class="number">0</span>,(<span class="keyword">sizeof</span> (<span class="keyword">int</span>))*(n+<span class="number">5</span>)),<span class="built_in">memset</span>(rk,<span class="number">0</span>,(<span class="keyword">sizeof</span> (<span class="keyword">int</span>))*(n+<span class="number">5</span>));</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i,x,y;j&lt;=m;++j)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (used[j]) <span class="keyword">continue</span>;</div><div class="line">x=top[getfather(edge[j][<span class="number">0</span>])],y=top[getfather(edge[j][<span class="number">1</span>])];</div><div class="line"><span class="keyword">for</span> (;x!=y;)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (depth[x]&lt;depth[y]) x^=y^=x^=y;</div><div class="line">f[eid[x]]+=m-j+<span class="number">1</span>,x=merge(getfather(x),getfather(anc[x]));</div><div class="line">&#125;</div><div class="line">f[j]+=m-j+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//tot3+=((double)(clock()-tmp))/CLOCKS_PER_SEC;</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) write(f[i]),<span class="built_in">putchar</span>(i&lt;m?<span class="string">' '</span>:<span class="string">'\n'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//printf("%.5lf %.5lf %.5lf\n",tot1,tot2,tot3);</span></div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h1 id="XORTREEH"><a href="#XORTREEH" class="headerlink" title="XORTREEH"></a>XORTREEH</h1><p>为了这道题突击学习了一下FWT……<br>考虑计算出$\mathrm{mex}$值为$x$的概率$f_x$。<br>这个可以用一个简单的容斥：$\mathrm{mex}=x$的子序列数$=\mathrm{mex}\geq x-1$的子序列数$-\mathrm{mex}\geq x$的子序列数。<br>然后接下来的事情就是求出选出$X$个子序列之后$\mathrm{mex}$值为$x$的概率。考虑多选一个子序列，那么新的概率$f’_x$其实就是对$f$做一次异或卷积：<br>$$<br>f’_x=\sum_{i\ \mathrm{xor}_k\ j=x}f_i\times f_j<br>$$<br>然后我们只需要对$f$数组做一次$k$进制FWT，然后对每个元素取$X$次幂，最后再UFWT回来就好了。<br>模数十分友好，它减$1$是$K$以内所有正整数的倍数。由WolframAlpha得原根是$22$。于是就可以做数论变换了。<br>时间复杂度$O(Kn\log_Kn)$。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> P=<span class="number">330301441</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> V=<span class="number">100000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> G=<span class="number">22</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_power</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> ret=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (;y;y&gt;&gt;=<span class="number">1</span>,x=<span class="number">1l</span>l*x*x%P) <span class="keyword">if</span> (y&amp;<span class="number">1</span>) ret=<span class="number">1l</span>l*ret*x%P;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> POW2[N],POW[N],f[N],b[N],g[N],cnt[N];</div><div class="line"><span class="keyword">int</span> T,n,K,omega,mx,len,ans;</div><div class="line">LL X;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DWT</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> sig)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l=K;l&lt;=len;l*=K)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) b[i]=a[i];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,h=l/K;i&lt;len;i+=l)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;h;++j)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;K;++k)</div><div class="line">&#123;</div><div class="line">a[i+j+k*h]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k_=<span class="number">0</span>;k_&lt;K;++k_) (a[i+j+k*h]+=<span class="number">1l</span>l*b[i+j+k_*h]*POW[(k*k_%K*sig+K)%K]%P)%=P;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">for</span> (len=<span class="number">1</span>;len&lt;=mx;len*=K);</div><div class="line">POW[<span class="number">0</span>]=<span class="number">1</span>,omega=quick_power(G,(P<span class="number">-1</span>)/K);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;++i) POW[i]=<span class="number">1l</span>l*POW[i<span class="number">-1</span>]*omega%P;</div><div class="line">DWT(f,<span class="number">1</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) f[i]=quick_power(f[i],X%(P<span class="number">-1</span>));</div><div class="line">DWT(f,<span class="number">-1</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,inv=quick_power(len,P<span class="number">-2</span>);i&lt;len;++i) f[i]=<span class="number">1l</span>l*f[i]*inv%P;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"xortreeh.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"xortreeh.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">POW2[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=V;++i) POW2[i]=(POW2[i<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>)%P;</div><div class="line"><span class="keyword">for</span> (T=read();T--;)</div><div class="line">&#123;</div><div class="line"><span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt),<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f),<span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);</div><div class="line"> n=read(),K=read(),<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;X),mx=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;++i) ++cnt[x=read()],mx=max(mx,x);</div><div class="line">++mx;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=mx;++i) g[i]=(POW2[cnt[i]]<span class="number">-1</span>+P)%P;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mx;++i) g[i]=<span class="number">1l</span>l*g[i<span class="number">-1</span>]*g[i]%P,(cnt[i]+=cnt[i<span class="number">-1</span>])%=P;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mx;++i) f[i]=(<span class="number">1l</span>l*g[i<span class="number">-1</span>]*POW2[n-cnt[i<span class="number">-1</span>]]%P<span class="number">-1l</span>l*g[i]*POW2[n-cnt[i]]%P+P)%P;</div><div class="line">f[<span class="number">0</span>]=POW2[n-cnt[<span class="number">0</span>]];</div><div class="line">calc(),ans=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,div=quick_power(quick_power(POW2[n],X%(P<span class="number">-1</span>)),P<span class="number">-2</span>)%P;i&lt;len;++i) (ans+=quick_power(<span class="number">1l</span>l*quick_power(i,<span class="number">2</span>)*quick_power(<span class="number">1l</span>l*f[i]*div%P,<span class="number">3</span>)%P,i))%=P;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;弱鸡选手第一次认真打CC马拉松，然而多项式菜不会异或卷积，题答水平又低，于是只能做$8$道题……
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="计数类问题" scheme="http://yoursite.com/tags/%E8%AE%A1%E6%95%B0%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
    
      <category term="普通动态规划" scheme="http://yoursite.com/tags/%E6%99%AE%E9%80%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="CodeChef" scheme="http://yoursite.com/tags/CodeChef/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="单调栈" scheme="http://yoursite.com/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
      <category term="暴力" scheme="http://yoursite.com/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="生成树" scheme="http://yoursite.com/tags/%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="FFT/NTT/FWT" scheme="http://yoursite.com/tags/FFT-NTT-FWT/"/>
    
      <category term="容斥原理" scheme="http://yoursite.com/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>AGC010-E Rearranging</title>
    <link href="http://yoursite.com/2017/10/17/agc010-e/"/>
    <id>http://yoursite.com/2017/10/17/agc010-e/</id>
    <published>2017-10-17T14:34:42.000Z</published>
    <updated>2017-10-18T12:41:38.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定$n$个整数$a_i$，两个人要把这些数排成一个数列，他们进行如下操作：<br>$\bullet$第一个人先将这些数按照他想要的方式排成一个数列<br>$\bullet$第一个人排完之后，第二个人可以选择两个位置相邻的互质数交换，他可以执行该操作任意次。<br>第一个人想要使最后的数列字典序尽量小，第二个人想使最后的数列字典序尽量大。假设两个人都绝顶聪明。<br>求最后的数列。</p><p>$1\leq n\leq 2000,1\leq a_i\leq 10^8$<br><a id="more"></a></p><hr><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>首先我们先找到第一个人排完之后第二个人的最优策略是什么：考虑两个不互质的数$x$和$y$，显然不管我怎么交换，$x$和$y$的相对位置都不会发生改变。那我考虑枚举一个在前面的数$a_i$，在后面的数$a_j$，如果$\gcd(a_i,a_j)=1$那么就从$i$向$j$连一条边，表示$i$在最终序列必须在$j$前面。<br>那么我们就可以贪心地构造出最终数列了。考虑对连成的图做拓扑排序，每次优先选择$a_x$大的出队加在已经生成的数列后面就好了。<br>回到问题本身，我们在上面的思路上继续扩展。考虑在所有不互质的$i$和$j$之间连无向边。那么问题就是给这个无向图定向成一个有向无环图，使得这个有向无环图进行上面贪心得到的序列字典序尽量小。<br>这个图可能会有多个连通块，显然，可以将它们分开来考虑。合并两个连通块的时候就是贪心地将两个已有的序列合并成一个字典序尽量大的序列，满足同一个序列的元素相对顺序不变。<br>那么现在我们只考虑连通图，第一个人肯定希望最小的元素<strong>严格</strong>作为第一个出队的，而这个一定存在至少一种方案：考虑以该点作为开始节点对图做一遍$DFS$，得到的$DFS$树就是我们定向的方案。<br>然后我们删掉这个元素，这幅图就又分裂成若干个连通块，剩下的过程肯定是和上一步类似的。但是这样我们会发现，如果我们选择了一个和删掉的点之间没有连边的，那么第二个人肯定可以先让这个出队，于是最小元素就不是第一个出队得了。因此我们只能选择和删除元素有连边的最小的（这样它肯定不会先于任何一个之前所选的出队）。<br>用一个比较简单的过程来描述，就是对于一个连通块我们从最小的点开始$DFS$。对于一个节点，我们按照从小到大顺序遍历儿子节点，然后将所有儿子节点的最终序列按照第二个人的贪心策略合并起来，最后在最前面加上当前节点。<br>总的时间复杂度是$O(n^2\log {\max\{a_i\}})$的。<br>这题的贪心挺妙的啊，我拿掉最小元素之后就不会了啊。。。</p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; V;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> E=N*N;</div><div class="line"></div><div class="line">V seq[N];</div><div class="line"></div><div class="line"><span class="keyword">int</span> tov[E],nxt[E];</div><div class="line"><span class="keyword">int</span> num[N],id[N];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="keyword">int</span> last[N];</div><div class="line"><span class="keyword">int</span> n,tot,rt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> num[x]&lt;num[y];&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;tov[++tot]=y,nxt[tot]=last[x],last[x]=tot;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> y?gcd(y,x%y):x;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(V a,V b,V &amp;ret)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">ret.resize(<span class="number">0</span>),ret.reserve(a.size()+b.size());</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ita=a.begin(),itb=b.begin();</div><div class="line"><span class="keyword">for</span> (;ita!=a.end()||itb!=b.end();)</div><div class="line"><span class="keyword">if</span> (ita==a.end()||itb!=b.end()&amp;&amp;num[*itb]&gt;num[*ita]) ret.push_back(*itb),++itb;</div><div class="line"><span class="keyword">else</span> ret.push_back(*ita),++ita;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">V son;vis[x]=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x];i;i=nxt[i]) son.push_back(tov[i]);</div><div class="line">sort(son.begin(),son.end(),cmp);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,y;i&lt;(<span class="keyword">int</span>)son.size();++i)</div><div class="line"><span class="keyword">if</span> (!vis[y=son[i]]) dfs(y),merge(seq[y],seq[x],seq[x]);</div><div class="line">seq[x].insert(seq[x].begin(),x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"rearranging.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"rearranging.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num[i]),id[i]=i;</div><div class="line">sort(id+<span class="number">1</span>,id+<span class="number">1</span>+n,cmp);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;++j)</div><div class="line"><span class="keyword">if</span> (gcd(num[i],num[j])!=<span class="number">1</span>) insert(i,j),insert(j,i);</div><div class="line">rt=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;++i)</div><div class="line"><span class="keyword">if</span> (!vis[x=id[i]]) dfs(x),merge(seq[rt],seq[x],seq[x]),rt=x;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)seq[rt].size();++i) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,num[seq[rt][i]],i+<span class="number">1</span>&lt;(<span class="keyword">int</span>)seq[rt].size()?<span class="string">' '</span>:<span class="string">'\n'</span>);</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给定$n$个整数$a_i$，两个人要把这些数排成一个数列，他们进行如下操作：&lt;br&gt;$\bullet$第一个人先将这些数按照他想要的方式排成一个数列&lt;br&gt;$\bullet$第一个人排完之后，第二个人可以选择两个位置相邻的互质数交换，他可以执行该操作任意次。&lt;br&gt;第一个人想要使最后的数列字典序尽量小，第二个人想使最后的数列字典序尽量大。假设两个人都绝顶聪明。&lt;br&gt;求最后的数列。&lt;/p&gt;
&lt;p&gt;$1\leq n\leq 2000,1\leq a_i\leq 10^8$&lt;br&gt;
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="AtCoder" scheme="http://yoursite.com/tags/AtCoder/"/>
    
      <category term="拓扑图" scheme="http://yoursite.com/tags/%E6%8B%93%E6%89%91%E5%9B%BE/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="DFS树" scheme="http://yoursite.com/tags/DFS%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HDU6073 Matching In Multiplication</title>
    <link href="http://yoursite.com/2017/10/15/hdu6073/"/>
    <id>http://yoursite.com/2017/10/15/hdu6073/</id>
    <published>2017-10-15T12:11:38.000Z</published>
    <updated>2017-10-15T12:45:52.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一个$X$部和$Y$部都有$n$个点的带边权二分图，$X$部的每一个点都会和$Y$部的两个不同的点有连边。<br>对于这个二分图的一个完美匹配，定义它的权重是所有匹配边的边权乘积。<br>你需要计算这个二分图所有完美匹配的权重之和，答案对$998244353$取模。<br>题目保证一定存在完美匹配。</p><p>$1\leq n\leq 3\times10^5$<br><a id="more"></a></p><hr><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>%Werkeytom_FTD多校时当场切掉<br>首先我们要转化一下模型：对于$x_i$，如果其连向$y_{i,1}$和$y_{i,2}$，且边权分别是$c_{i,1}$和$c_{i,2}$，那么我们在新的图中连$(y_{i,1},y_{i,2})$边权为$c_{i,2}$，$(y_{i,2},y_{i,1})$边权为$c_{i,1}$。在原图中$x_i$如果匹配了$y_{i,1}$，那么相当于我们选择了$(y_{i,2},y_{i,1})$这一条边，反之亦然。<br>可以发现我们这样会得到一副$n$个点$n$条无向边（将一对有向边看成一条）的新图，原图的一个完美匹配，其实就对应于新图的一个边定向（一对边中选择一条）方案，这个方案满足<strong>所有点的入度都是$1$</strong>。<br>由于题目保证一定存在完美匹配，所以这副图的每一个连通块一定都是一棵环套树（如果不是，不可能有满足条件的定向方案）。<br>然后就很方便了，因为树边一定是唯一定向的，而环有正反两种方案。对于每一个连通块我们都统计出两种方案各自的权重$a$和$b$，答案乘上$a+b$就好了。<br>时间复杂度$O(n)$。<br>直接将图看成$2n$个点$2n$条边的环套树可能也可以做？</p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> P=<span class="number">998244353</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">300005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> E=N&lt;&lt;<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> last[N],cir[N],pts[N],used[N];</div><div class="line"><span class="keyword">int</span> tov[E],nxt[E],len[E];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="keyword">int</span> T,n,tot,ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;tov[++tot]=y,len[tot]=z,nxt[tot]=last[x],last[x]=tot;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> e=<span class="number">0</span>)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> ret=<span class="number">0</span>;</div><div class="line">vis[cir[++cir[<span class="number">0</span>]]=pts[++pts[<span class="number">0</span>]]=x]=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x],y,tmp;i;i=nxt[i])</div><div class="line"><span class="keyword">if</span> (i<span class="number">-1</span>&gt;&gt;<span class="number">1</span>!=e)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (vis[y=tov[i]]) <span class="keyword">return</span> y;</div><div class="line">tmp=dfs(y,i<span class="number">-1</span>&gt;&gt;<span class="number">1</span>);</div><div class="line"><span class="keyword">if</span> (tmp) ret=tmp;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!ret) cir[cir[<span class="number">0</span>]--]=<span class="number">0</span>;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">vis[x]=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x],y;i;i=nxt[i])</div><div class="line"><span class="keyword">if</span> (!vis[y=tov[i]]) ans=<span class="number">1l</span>l*ans*len[i]%P,calc(y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> &amp;ret,<span class="keyword">int</span> cur)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[x],y;i;i=nxt[i])</div><div class="line"><span class="keyword">if</span> (used[i<span class="number">-1</span>&gt;&gt;<span class="number">1</span>]!=cur&amp;&amp;!vis[y=tov[i]])</div><div class="line">used[i<span class="number">-1</span>&gt;&gt;<span class="number">1</span>]=cur,go(y,ret=<span class="number">1l</span>l*ret*len[i]%P,cur);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;<span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span> last),tot=<span class="number">0</span>;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"match.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"match.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">for</span> (T=read();T--;clear())</div><div class="line">&#123;</div><div class="line">n=read();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,l,y,r;i&lt;=n;++i) x=read(),l=read()%P,y=read(),r=read()%P,insert(x,y,r),insert(y,x,l),used[i]=vis[i]=<span class="number">0</span>;</div><div class="line">ans=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p=<span class="number">1</span>,cp,a,b;p&lt;=n;++p)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (vis[p]) <span class="keyword">continue</span>;</div><div class="line">cir[<span class="number">0</span>]=pts[<span class="number">0</span>]=<span class="number">0</span>,cp=dfs(p);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pts[<span class="number">0</span>];++i) vis[pts[i]]=<span class="number">0</span>;</div><div class="line">cir[<span class="number">0</span>]=pts[<span class="number">0</span>]=<span class="number">0</span>,dfs(cp);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pts[<span class="number">0</span>];++i) vis[pts[i]]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cir[<span class="number">0</span>];++i) vis[cir[i]]=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cir[<span class="number">0</span>];++i) calc(cir[i]);</div><div class="line">a=b=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cir[<span class="number">0</span>];++i) vis[cir[i]]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=last[cp],y;i;i=nxt[i])</div><div class="line"><span class="keyword">if</span> (!vis[y=tov[i]])</div><div class="line"><span class="keyword">if</span> (!a) go(y,a=len[i],used[i<span class="number">-1</span>&gt;&gt;<span class="number">1</span>]=(p&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>);</div><div class="line"><span class="keyword">else</span> go(y,b=len[i],used[i<span class="number">-1</span>&gt;&gt;<span class="number">1</span>]=p&lt;&lt;<span class="number">1</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cir[<span class="number">0</span>];++i) vis[cir[i]]=<span class="number">1</span>;</div><div class="line">ans=<span class="number">1l</span>l*ans*((a+b)%P)%P;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给定一个$X$部和$Y$部都有$n$个点的带边权二分图，$X$部的每一个点都会和$Y$部的两个不同的点有连边。&lt;br&gt;对于这个二分图的一个完美匹配，定义它的权重是所有匹配边的边权乘积。&lt;br&gt;你需要计算这个二分图所有完美匹配的权重之和，答案对$998244353$取模。&lt;br&gt;题目保证一定存在完美匹配。&lt;/p&gt;
&lt;p&gt;$1\leq n\leq 3\times10^5$&lt;br&gt;
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="计数类问题" scheme="http://yoursite.com/tags/%E8%AE%A1%E6%95%B0%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
    
      <category term="二分图" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="HDOJ" scheme="http://yoursite.com/tags/HDOJ/"/>
    
      <category term="环套树" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A5%97%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HackerRank-Moody&#39;s Analytics Fall University CodeSprint-Let&#39;s Play a Game</title>
    <link href="http://yoursite.com/2017/10/15/hackerrank-lets-play-a-game-2/"/>
    <id>http://yoursite.com/2017/10/15/hackerrank-lets-play-a-game-2/</id>
    <published>2017-10-15T02:30:00.000Z</published>
    <updated>2017-10-15T12:30:01.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一个$1\times n$的格子图。每一个格子都有着一种颜色（红蓝绿白之一）。每个格子上都有一定数量的硬币，不同的格子的硬币数一定是不同的。<br>你需要从格子图任选一个格子作为开始位置，每次你可以从一个格子跳到图中另外一个<strong>没有访问过的</strong>格子上。<br>跳格子有一个规则：从红色或者蓝色格子只能跳到绿色或白色格子上，从绿色或白色格子只能跳到红色或蓝色格子上。<br>你要一直跳到没有能够继续跳的格子为止。将你经过的所有格子的硬币数记录成一个序列，我们希望最大化这个序列的<strong>最长上升子序列</strong>长度。</p><p>$1\leq n\leq4\times10^5$<br><a id="more"></a></p><hr><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>HackerRank居然出论文题。<img src="/image/spit.jpg" alt="spit"><br>首先题目四种颜色本质就是两种颜色，问题变成在一个带点权完全二分图上找到一条路径使其最长上升子序列最长。<br>然后这个玩意儿居然有人研究……结论是：假设$|X|\geq|Y|$，一定存在一个$LIS$包含了$|Y|$部的所有点。<br>然后就很方便了，我们直接去构造这个$LIS$：把两个部的点都按权值排好序，然后把$|X|$部的点尽可能多地插入到$|Y|$部的相邻两个元素中就好了。</p><p>时间复杂度$O(n\log n)$。</p><p>证明？咳咳比较复杂，限(wo)于(bi)篇(jiao)幅(lan)就不在这里展开了。可以看一下参考文献。<br>思路就是证明只要$LIS$没有完全包含$|Y|$部的点，一定存在一种原本基础上的构造能够使新的$LIS$在$Y$部的点数恰好多$1$。<br>中间都是一些分类讨论和反证。</p><hr><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://pdfs.semanticscholar.org/edc4/7bab508ae70ae5a8c184a047bd5289c6d6c6.pdf" target="_blank" rel="external">Guan-Yu Lin, Jia-Jie Liu, and Yue-Li Wang, Finding a Longest Increasing Subsequence from the Paths in a Complete Bipartite Graph</a></p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">400005</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> nodes[<span class="number">2</span>][N];</div><div class="line"><span class="keyword">char</span> str[N];</div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"><span class="keyword">int</span> n,ans,cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">greedy</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">if</span> (!nodes[<span class="number">0</span>][<span class="number">0</span>])</div><div class="line">&#123;</div><div class="line">ans=nodes[<span class="number">1</span>][<span class="number">0</span>]&gt;<span class="number">0</span>;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">ans=nodes[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line"><span class="keyword">int</span> head=<span class="number">1</span>,tail=nodes[<span class="number">1</span>][<span class="number">0</span>];</div><div class="line"><span class="keyword">if</span> (nodes[<span class="number">1</span>][<span class="number">0</span>]&gt;nodes[<span class="number">0</span>][<span class="number">0</span>])</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (nodes[<span class="number">1</span>][head]&lt;nodes[<span class="number">0</span>][<span class="number">1</span>]) ++ans,++head;</div><div class="line"><span class="keyword">if</span> (head&lt;=tail&amp;&amp;nodes[<span class="number">1</span>][tail]&gt;nodes[<span class="number">0</span>][nodes[<span class="number">0</span>][<span class="number">0</span>]]) ++ans,--tail;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodes[<span class="number">1</span>][head]&lt;nodes[<span class="number">0</span>][<span class="number">1</span>]) ++ans,++head;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodes[<span class="number">1</span>][tail]&gt;nodes[<span class="number">0</span>][nodes[<span class="number">0</span>][<span class="number">0</span>]]) ++ans,--tail;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nodes[<span class="number">0</span>][<span class="number">0</span>];++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (;head&lt;=tail&amp;&amp;nodes[<span class="number">1</span>][head]&lt;nodes[<span class="number">0</span>][i];++head);</div><div class="line">ans+=head&lt;=tail&amp;&amp;nodes[<span class="number">1</span>][head]&lt;nodes[<span class="number">0</span>][i+<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"game.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"game.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">n=read(),<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str),cnt=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) cnt+=str[i]==<span class="string">'B'</span>||str[i]==<span class="string">'R'</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;++i) x=(str[i<span class="number">-1</span>]==<span class="string">'B'</span>||str[i<span class="number">-1</span>]==<span class="string">'R'</span>)^(cnt*<span class="number">2</span>&lt;=n),nodes[x][++nodes[x][<span class="number">0</span>]]=read();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i) sort(nodes[i]+<span class="number">1</span>,nodes[i]+<span class="number">1</span>+nodes[i][<span class="number">0</span>]);</div><div class="line">greedy(),<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给定一个$1\times n$的格子图。每一个格子都有着一种颜色（红蓝绿白之一）。每个格子上都有一定数量的硬币，不同的格子的硬币数一定是不同的。&lt;br&gt;你需要从格子图任选一个格子作为开始位置，每次你可以从一个格子跳到图中另外一个&lt;strong&gt;没有访问过的&lt;/strong&gt;格子上。&lt;br&gt;跳格子有一个规则：从红色或者蓝色格子只能跳到绿色或白色格子上，从绿色或白色格子只能跳到红色或蓝色格子上。&lt;br&gt;你要一直跳到没有能够继续跳的格子为止。将你经过的所有格子的硬币数记录成一个序列，我们希望最大化这个序列的&lt;strong&gt;最长上升子序列&lt;/strong&gt;长度。&lt;/p&gt;
&lt;p&gt;$1\leq n\leq4\times10^5$&lt;br&gt;
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="HackerRank" scheme="http://yoursite.com/tags/HackerRank/"/>
    
      <category term="定理题" scheme="http://yoursite.com/tags/%E5%AE%9A%E7%90%86%E9%A2%98/"/>
    
      <category term="二分图" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>CodeChef SEAARC</title>
    <link href="http://yoursite.com/2017/10/06/codechef-SEAARC/"/>
    <id>http://yoursite.com/2017/10/06/codechef-SEAARC/</id>
    <published>2017-10-06T08:58:38.000Z</published>
    <updated>2017-10-15T12:33:58.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一个长度为$n$的序列${a_n}$，对于任意$x\neq y$，如果$a_x=a_y$，则在$x$和$y$之间画一条弧。<br>称两条弧$(x,y)$与$(l,r)$相交当且仅当$x&lt;l&lt;y&lt;r$或者$l&lt;x&lt;r&lt;y$。求有多少条异色弧相交。</p><p>$1\leq n\leq 10^5,1\leq a_i\leq 10^5$<a id="more"></a></p><hr><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>正难则反：考虑计算出所有的异色弧对数（枚举颜色用前缀和优化计算，线性），减去形如AABB的以及ABBA的就是答案了。<br>AABB挺好算的，枚举位置，也是记录前缀和之类的东西就可以在线性时间内算完了。<br>关键就在于ABBA怎么算。考虑阈值均衡，设$T$为阈值。出现次数小于等于$T$的颜色称为小块($S$)，出现次数大于$T$的颜色称为大块($L$)。</p><p>分类讨论：</p><p>对于形如LSSL的，我们枚举$A$的颜色种类，以及第二个$B$的位置。<br>用数组记录对于特定一种（小块）颜色，其所有已经枚举过的位置前面的$A$这种颜色种类出现的次数之和，这个可以在枚举过程中更新。<br>将上面的信息乘上当前枚举的位置后面$A$这种颜色出现次数即可更新答案。<br>时间复杂度$O\left(\frac{n^2}T\right)$。</p><p>对于形如SLLS以及LLLL的（也就是B的颜色是大块的），我们枚举B的颜色种类以及第二个A的位置。<br>设${pre}_i$表示前$i$个位置B的出现次数，$A$存的是所有和A同色的出现的位置，我们分析A的某一种颜色带来的贡献<br>$$\sum_{i=1}^{|A|}\sum_{j=1}^{i-1}{{pre}_i-{pre}_j\choose 2}$$<br>拆开来就是<br>$$<br>\frac12\sum_{i=1}^{|A|}\left({pre}^2_i(i-1)-2{pre}_i\sum_{j=1}^{i-1}{pre}_j+\sum_{j=1}^{i-1}{pre}^2_j+\sum_{j=1}^{i-1}{pre}_j-{pre}_i(i-1)\right)<br>$$<br>维护一下${pre}_j$以及${pre}^2_j$的前缀和就好了。<br>时间复杂度也是$O\left(\frac{n^2}T\right)$。</p><p>剩下的就是形如SSSS的。注意到枚举所有同色小块的一对位置的时间复杂度是$O(nT)$的。<br>我们枚举第一个B的位置，对于已经枚举过的A的左端点，我们打一个$+1$标记，对于这个左端点右边所有可能的右端点，我们都打一个$-1$标记，统计答案的话我们再枚举第二个B的位置计算一下标记数组前缀和就能更新了。这个使用树状数组就可以了。<br>时间复杂度是$O(nT\log n)$的。</p><p>总的时间复杂度，理论上$T=\sqrt{\frac n{\log n}}$能达到$O(n\sqrt{n\log n})$。不过由于树状数组常数贼小，其余部分的计算取模运算又比较多，因此适当调大一下$T$的大小可以更快。</p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> P=<span class="number">1000000007</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> itwo=P+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> ifact=<span class="number">41666667</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100000</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line"><span class="keyword">char</span> ch=getchar();</div><div class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line"><span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> a[N+<span class="number">5</span>],cnt[N+<span class="number">5</span>],f[N+<span class="number">5</span>],g[N+<span class="number">5</span>],pre[N+<span class="number">5</span>],pre_[N+<span class="number">5</span>];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>[N+<span class="number">5</span>];</div><div class="line"><span class="keyword">int</span> n,AABB,ABBA,all,ans,T,mx;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l*n*(n<span class="number">-1</span>)%P*itwo%P;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C4</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l*n*(n<span class="number">-1</span>)%P*(n<span class="number">-2</span>)%P*(n<span class="number">-3</span>)%P*ifact%P;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sqr</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l*x*x%P;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;-x;&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fenwick_tree</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">int</span> num[N+<span class="number">5</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">for</span> (;x&lt;=n;x+=lowbit(x)) (num[x]+=y)%=P;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> ret=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;x;x-=lowbit(x)) (ret+=num[x])%=P;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line">&#125;t;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc_AABB</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mx;++i) pre[i]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">&#123;</div><div class="line">(sum+=P-C2(pre[a[i]]++))%=P;</div><div class="line">(AABB+=<span class="number">1l</span>l*sum*(cnt[a[i]]-pre[a[i]])%P)%=P;</div><div class="line">(sum+=C2(pre[a[i]]))%=P;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc_ABBA</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">T=trunc(<span class="built_in">sqrt</span>(n));</div><div class="line"><span class="comment">//case 1: LSSL</span></div><div class="line"><span class="comment">//iterator A's color and the position of B</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,tmp;i&lt;=mx;++i)</div><div class="line"><span class="keyword">if</span> (cnt[i]&gt;T)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mx;++j) pre[j]=<span class="number">0</span>;</div><div class="line">tmp=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</div><div class="line"><span class="keyword">if</span> (a[j]==i) ++tmp;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cnt[a[j]]&lt;=T) (ABBA+=<span class="number">1l</span>l*pre[a[j]]*(cnt[i]-tmp)%P)%=P,(pre[a[j]]+=tmp)%=P;</div><div class="line">&#125;</div><div class="line"><span class="comment">//case 2: SLLS &amp;&amp; LLLL</span></div><div class="line"><span class="comment">//iterator B's color and the postion of A</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mx;++i)</div><div class="line"><span class="keyword">if</span> (cnt[i]&gt;T)</div><div class="line">&#123;</div><div class="line">pre[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j) pre[j]=pre[j<span class="number">-1</span>]+(a[j]==i);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mx;++j) f[j]=g[j]=pre_[j]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>,tmp;j&lt;=n;++j)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (a[j]==i) <span class="keyword">continue</span>;</div><div class="line">tmp=((((<span class="number">1l</span>l*sqr(pre[j])*pre_[a[j]]%P<span class="number">-2l</span>l*pre[j]*f[a[j]]%P+P)%P+f[a[j]])%P+g[a[j]])%P<span class="number">-1l</span>l*pre[j]*pre_[a[j]]%P+P)%P;</div><div class="line">(ABBA+=<span class="number">1l</span>l*tmp*itwo%P)%=P,(f[a[j]]+=pre[j])%=P,(g[a[j]]+=sqr(pre[j]))%=P;</div><div class="line">++pre_[a[j]];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//case 3: SSSS</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (cnt[a[i]]&gt;T) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">int</span> ptr=cnt[a[i]]<span class="number">-1</span>,rg=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;<span class="built_in">list</span>[a[i]][ptr]&gt;i;--ptr) (ABBA+=t.query(<span class="built_in">list</span>[a[i]][ptr]))%=P,t.modify(<span class="built_in">list</span>[a[i]][ptr],<span class="number">-1</span>),++rg;</div><div class="line">t.modify(i,rg);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mx;++i) <span class="keyword">if</span> (cnt[i]&lt;=T) (ABBA+=P-C4(cnt[i]))%=P;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">freopen(<span class="string">"seaarc.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"seaarc.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">n=read();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ++cnt[a[i]=read()],<span class="built_in">list</span>[a[i]].push_back(i),mx=max(mx,a[i]);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,sum=<span class="number">0</span>,tmp;i&lt;=mx;++i) (all+=<span class="number">1l</span>l*(tmp=C2(cnt[i]))*sum%P)%=P,(sum+=tmp)%=P;</div><div class="line">calc_AABB(),calc_ABBA(),ans=((all-AABB+P)%P-ABBA+P)%P;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给定一个长度为$n$的序列${a_n}$，对于任意$x\neq y$，如果$a_x=a_y$，则在$x$和$y$之间画一条弧。&lt;br&gt;称两条弧$(x,y)$与$(l,r)$相交当且仅当$x&amp;lt;l&amp;lt;y&amp;lt;r$或者$l&amp;lt;x&amp;lt;r&amp;lt;y$。求有多少条异色弧相交。&lt;/p&gt;
&lt;p&gt;$1\leq n\leq 10^5,1\leq a_i\leq 10^5$
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="计数类问题" scheme="http://yoursite.com/tags/%E8%AE%A1%E6%95%B0%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
    
      <category term="CodeChef" scheme="http://yoursite.com/tags/CodeChef/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="阈值均衡" scheme="http://yoursite.com/tags/%E9%98%88%E5%80%BC%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>AGC018-E Sightseeing Plan</title>
    <link href="http://yoursite.com/2017/10/03/agc018-e/"/>
    <id>http://yoursite.com/2017/10/03/agc018-e/</id>
    <published>2017-10-03T12:01:18.000Z</published>
    <updated>2017-10-06T12:22:02.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定三个在平面直角坐标系的第一象限上矩形$[x_1,y_1][x_2,y_2],[x_3,y_3][x_4,y_4],[x_5,y_5][x_6,y_6]$。<br>你要从第一个矩形内选出一个整点作为起始点，第二个中选出一个中转点，第三个中选出一个结束点，然后从起始点开始不断向上或右走，经过中转点最后到结束点。求不同的路径的总数量。<br>两条路径不同当且仅当它们的起始/中转/结束点存在不同或者路线不一样。<a id="more"></a></p><p>$1\leq x_1&lt;x_2&lt;x_3&lt;x_4&lt;x_5&lt;x_6\leq10^6,1\leq y_1&lt;y_2&lt;y_3&lt;y_4&lt;y_5&lt;y_6\leq10^6$</p><hr><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>题目的条件太多了，考虑简化题目。<br>令$C(x,y)$表示从$(0,0)$走到$(x,y)$的方案，我们考虑一条简单的式子：<br>$$<br>\sum_{y=0}^Y{C(X,y)}=C(X+1,Y)<br>$$<br>这个相信大家都会。<br>再考虑使用两次将其扩展到二维的情况。<br>$$<br>\sum_{x=0}^X\sum_{y=0}^Y{C(x,y)}=C(X+1,Y+1)-1<br>$$<br>使用二维差分将其推广到对于一个一般的矩形的情况。<br>$$<br>\sum_{x=X_1}^{X_2}\sum_{y=Y_1}^{Y_2}{C(x,y)}=C(X_2+1,Y_2+1)-C(X_2+1,Y_1)-C(X_1,Y_2+1)+C(X_1,Y_1)<br>$$<br>由这条式子，我们可以看出，统计从一个点一直到一个矩形内所有点的方案数的问题，其实可以变成统计一个点到矩形四角上四个点的方案数问题。<br>考虑枚举第一个矩形的四个关键点之一，第三个矩形的关键点之一，然后对第二个矩形进行计算，现在问题是给定左下角和右上角的起点和终点，求经过矩形中每一个点的路径方案数的和。<br>可以发现，一条路径如果和矩形有$len$长度的相交，那么它对答案的贡献就要乘上$len$的系数。而这个$len$的数值可以由路径进入矩形的位置和离开矩形的位置来决定，具体而言，是两个$x$坐标的差加上两个$y$坐标的差。<br>考虑将路径贡献拆开来，枚举进入/离开矩形的位置，然后用路径总数乘上相应的系数（坐标之和，符号由进入/退出决定）加到答案里面。<br>最后的时间复杂度是$O(maxX+maxY)$。<br>感觉很妙啊。</p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> P=<span class="number">1000000007</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2000000</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> fact[N+<span class="number">5</span>],invf[N+<span class="number">5</span>];</div><div class="line"><span class="keyword">int</span> f[<span class="number">4</span>][<span class="number">3</span>],g[<span class="number">4</span>][<span class="number">3</span>];</div><div class="line"><span class="keyword">int</span> X1,X2,X3,X4,X5,X6,Y1,Y2,Y3,Y4,Y5,Y6,ans;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l*fact[n+m]*invf[n]%P*invf[m]%P;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123;(x+=y)%=P;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_power</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> ret=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (;y;y&gt;&gt;=<span class="number">1</span>,x=<span class="number">1l</span>l*x*x%P) <span class="keyword">if</span> (y&amp;<span class="number">1</span>) ret=<span class="number">1l</span>l*ret*x%P;</div><div class="line"><span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">fact[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i) fact[i]=<span class="number">1l</span>l*fact[i<span class="number">-1</span>]*i%P;</div><div class="line">invf[N]=quick_power(fact[N],P<span class="number">-2</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=N;i&gt;=<span class="number">1</span>;--i) invf[i<span class="number">-1</span>]=<span class="number">1l</span>l*invf[i]*i%P;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> sig1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2,<span class="keyword">int</span> sig2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> ret=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x=X3;x&lt;=X4;++x) add(ret,P<span class="number">-1l</span>l*C(x-x1,Y3<span class="number">-1</span>-y1)*(x+Y3)%P*C(x2-x,y2-Y3)%P),add(ret,<span class="number">1l</span>l*C(x2-x,y2-Y4<span class="number">-1</span>)*(x+Y4+<span class="number">1</span>)%P*C(x-x1,Y4-y1)%P);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y=Y3;y&lt;=Y4;++y) add(ret,P<span class="number">-1l</span>l*C(y-y1,X3<span class="number">-1</span>-x1)*(y+X3)%P*C(y2-y,x2-X3)%P),add(ret,<span class="number">1l</span>l*C(y2-y,x2-X4<span class="number">-1</span>)*(y+X4+<span class="number">1</span>)%P*C(y-y1,X4-x1)%P);</div><div class="line"><span class="keyword">return</span> ((ret*=sig1*sig2)+=P)%=P;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">pre();</div><div class="line">freopen(<span class="string">"sightseeing.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"sightseeing.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>,&amp;X1,&amp;X2,&amp;X3,&amp;X4,&amp;X5,&amp;X6),<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>,&amp;Y1,&amp;Y2,&amp;Y3,&amp;Y4,&amp;Y5,&amp;Y6),ans=<span class="number">0</span>;</div><div class="line">f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,f[<span class="number">0</span>][<span class="number">1</span>]=X1<span class="number">-1</span>,f[<span class="number">0</span>][<span class="number">2</span>]=Y1<span class="number">-1</span>;</div><div class="line">f[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">-1</span>,f[<span class="number">1</span>][<span class="number">1</span>]=X1<span class="number">-1</span>,f[<span class="number">1</span>][<span class="number">2</span>]=Y2;</div><div class="line">f[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">-1</span>,f[<span class="number">2</span>][<span class="number">1</span>]=X2,f[<span class="number">2</span>][<span class="number">2</span>]=Y1<span class="number">-1</span>;</div><div class="line">f[<span class="number">3</span>][<span class="number">0</span>]=<span class="number">1</span>,f[<span class="number">3</span>][<span class="number">1</span>]=X2,f[<span class="number">3</span>][<span class="number">2</span>]=Y2;</div><div class="line">g[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,g[<span class="number">0</span>][<span class="number">1</span>]=X6+<span class="number">1</span>,g[<span class="number">0</span>][<span class="number">2</span>]=Y6+<span class="number">1</span>;</div><div class="line">g[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">-1</span>,g[<span class="number">1</span>][<span class="number">1</span>]=X6+<span class="number">1</span>,g[<span class="number">1</span>][<span class="number">2</span>]=Y5;</div><div class="line">g[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">-1</span>,g[<span class="number">2</span>][<span class="number">1</span>]=X5,g[<span class="number">2</span>][<span class="number">2</span>]=Y6+<span class="number">1</span>;</div><div class="line">g[<span class="number">3</span>][<span class="number">0</span>]=<span class="number">1</span>,g[<span class="number">3</span>][<span class="number">1</span>]=X5,g[<span class="number">3</span>][<span class="number">2</span>]=Y5;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;++j)</div><div class="line">add(ans,calc(f[i][<span class="number">1</span>],f[i][<span class="number">2</span>],f[i][<span class="number">0</span>],g[j][<span class="number">1</span>],g[j][<span class="number">2</span>],g[j][<span class="number">0</span>]));</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给定三个在平面直角坐标系的第一象限上矩形$[x_1,y_1][x_2,y_2],[x_3,y_3][x_4,y_4],[x_5,y_5][x_6,y_6]$。&lt;br&gt;你要从第一个矩形内选出一个整点作为起始点，第二个中选出一个中转点，第三个中选出一个结束点，然后从起始点开始不断向上或右走，经过中转点最后到结束点。求不同的路径的总数量。&lt;br&gt;两条路径不同当且仅当它们的起始/中转/结束点存在不同或者路线不一样。
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="AtCoder" scheme="http://yoursite.com/tags/AtCoder/"/>
    
      <category term="计数类问题" scheme="http://yoursite.com/tags/%E8%AE%A1%E6%95%B0%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
    
      <category term="组合数" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>HDU5511 Minimum Cut-Cut</title>
    <link href="http://yoursite.com/2017/10/01/hdu5511/"/>
    <id>http://yoursite.com/2017/10/01/hdu5511/</id>
    <published>2017-10-01T08:45:08.000Z</published>
    <updated>2017-10-25T13:57:10.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给定一颗$n$个节点的无根树，除此之外还给定一些非树边$(x,y)$。<br>这些非树边比较特殊，它们满足将树看成$1$为根的有根树的时候，$lca(x,y)=1$。<br>树边和非树边的数量之和是$m$。<br>要求求出<strong>恰好</strong>删除两条树边的一个最小的割。</p><p>$3\leq n\leq 2\times10^4,n-1\leq m\leq 10^5$<br><a id="more"></a></p><hr><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>考虑两种情况：一种是割了两条存在祖先儿子关系的树边，一种是割了两条没有祖先儿子关系的树边。（似乎这题不能够割掉一个叶子节点所有边让叶子孤立出来？我也不明白……）<br>我们令$d_x$表示一个端点落在$x$的子树内的所有非树边条数。<br>对于第一种情况，假设删的是$(x,{fa}_x)$,$(y,{fa}_y)$（$x$是$y$的祖先）那么答案就是$d_x-d_y$，$x$固定时$y$取$x$的儿子显然最优，直接枚举即可。<br>对于第二种情况，我们令$cnt_{x,y}$表示一个端点在$x$子树内，一个在$y$子树内的边的数量，那么显然答案是$d_x+d_y-2cnt_{x,y}$。<br>考虑在$\mathrm{DFS}$的过程中使用数据结构来实时维护对于当前$\mathrm{DFS}$到的点$x$而言，每一个点$y$的$d_y-2cnt_{x,y}$。<br>这个怎么实现呢？考虑使用重链剖分+标记不下传的动态开点的线段树，我们合并各个子树的线段树，当前新加入的相当于给某一条树链打上tag。<br>这样搞的话时空复杂度都是$O(m\log^2n)$的，可是这题空间比较紧过不了。怎么办呢？<br>我们考虑使用一个很tricky的技巧：我们重链剖分了这一棵树，那么我们$\mathrm{DFS}$的时候先进入重儿子，然后直接继承重儿子的线段树，对于轻儿子我们线段树合并的同时回收空闲节点。这样我们$\mathrm{DFS}$到点$x$的时候需要的线段树个数就是$x$到根路径上的轻边条数，而且每一棵线段树最多只会有$O(n)$个节点。因此空间复杂度是$O(n\log n)$。</p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> ch=getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) f=ch==<span class="string">'-'</span>?<span class="number">-1</span>:f,ch=getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> E=N&lt;&lt;<span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">100005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_=M&lt;&lt;<span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> LGN=<span class="number">16</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=(N&lt;&lt;<span class="number">2</span>)*LGN;</div><div class="line"></div><div class="line"><span class="keyword">int</span> last[N],DFN[N],fa[N],d[N],d_[N],root[N],top[N],hea[N],size[N],head[N];</div><div class="line"><span class="keyword">int</span> adj[M_],stp[M_];</div><div class="line"><span class="keyword">int</span> tov[E],nxt[E];</div><div class="line"><span class="keyword">int</span> val[N&lt;&lt;<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> n,m,tot,cnt,idx,T,ans,cas;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;tov[++tot]=y,nxt[tot]=last[x],last[x]=tot;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hang</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;adj[++cnt]=y,stp[cnt]=head[x],head[x]=cnt;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="keyword">int</span> tag[S],mi[S];</div><div class="line">    <span class="keyword">int</span> son[S][<span class="number">2</span>];</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; avl;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> np=avl.front();avl.pop();</div><div class="line">        mi[np]=val[x],tag[np]=son[np][<span class="number">0</span>]=son[np][<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> np;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;avl.push(rt);&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        mi[rt]=m+<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (l==r) mi[rt]=val[x];</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (son[rt][<span class="number">0</span>]) mi[rt]=min(mi[rt],mi[son[rt][<span class="number">0</span>]]);</div><div class="line">            <span class="keyword">else</span> mi[rt]=min(mi[rt],val[x&lt;&lt;<span class="number">1</span>]);</div><div class="line">            <span class="keyword">if</span> (son[rt][<span class="number">1</span>]) mi[rt]=min(mi[rt],mi[son[rt][<span class="number">1</span>]]);</div><div class="line">            <span class="keyword">else</span> mi[rt]=min(mi[rt],val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">        mi[rt]+=tag[rt];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> x,<span class="keyword">int</span> st,<span class="keyword">int</span> en,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> delta)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (st&gt;en) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (!rt) rt=newnode(x);</div><div class="line">        <span class="keyword">if</span> (st==l&amp;&amp;en==r)</div><div class="line">        &#123;</div><div class="line">            tag[rt]+=delta,mi[rt]+=delta;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (en&lt;=mid) modify(son[rt][<span class="number">0</span>],x&lt;&lt;<span class="number">1</span>,st,en,l,mid,delta);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mid+<span class="number">1</span>&lt;=st) modify(son[rt][<span class="number">1</span>],x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,st,en,mid+<span class="number">1</span>,r,delta);</div><div class="line">        <span class="keyword">else</span> modify(son[rt][<span class="number">0</span>],x&lt;&lt;<span class="number">1</span>,st,mid,l,mid,delta),modify(son[rt][<span class="number">1</span>],x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,en,mid+<span class="number">1</span>,r,delta);</div><div class="line">        update(x,l,r,rt);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!x||!y) <span class="keyword">return</span> x^y;</div><div class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">        tag[x]+=tag[y],son[x][<span class="number">0</span>]=merge(p&lt;&lt;<span class="number">1</span>,l,mid,son[x][<span class="number">0</span>],son[y][<span class="number">0</span>]),son[x][<span class="number">1</span>]=merge(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,son[x][<span class="number">1</span>],son[y][<span class="number">1</span>]),update(p,l,r,x);</div><div class="line">        <span class="keyword">return</span> release(y),x;</div><div class="line">    &#125;</div><div class="line">&#125;t;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> x,<span class="keyword">int</span> delta)</span></span>&#123;<span class="keyword">for</span> (<span class="keyword">int</span> y;x;x=fa[y]) y=top[x],t.modify(rt,<span class="number">1</span>,DFN[y]==<span class="number">1</span>?<span class="number">2</span>:DFN[y],DFN[x],<span class="number">1</span>,idx,delta);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    size[x]=<span class="number">1</span>,hea[x]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=last[x],y;i;i=nxt[i])</div><div class="line">        <span class="keyword">if</span> ((y=tov[i])!=fa[x])</div><div class="line">        &#123;</div><div class="line">            fa[y]=x,dfs(y),size[x]+=size[y],d[x]+=d[y];</div><div class="line">            <span class="keyword">if</span> (!hea[x]||size[hea[x]]&lt;size[y]) hea[x]=y;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">HLD</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> tp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    d_[DFN[x]=++idx]=d[x],top[x]=tp;</div><div class="line">    <span class="keyword">if</span> (hea[x]) HLD(hea[x],tp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=last[x],y;i;i=nxt[i])</div><div class="line">        <span class="keyword">if</span> ((y=tov[i])!=fa[x]&amp;&amp;y!=hea[x]) HLD(y,y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l==r)</div><div class="line">    &#123;</div><div class="line">        val[x]=d_[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">    build(x&lt;&lt;<span class="number">1</span>,l,mid),build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r),val[x]=min(val[x&lt;&lt;<span class="number">1</span>],val[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (hea[x]) calc(hea[x]),root[x]=root[hea[x]];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=last[x],y;i;i=nxt[i])</div><div class="line">        <span class="keyword">if</span> ((y=tov[i])!=fa[x]&amp;&amp;y!=hea[x]) calc(y),root[x]=t.merge(<span class="number">1</span>,<span class="number">1</span>,idx,root[x],root[y]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[x],y;i;i=stp[i]) y=adj[i],change(root[x],y,<span class="number">-2</span>);</div><div class="line">    <span class="keyword">if</span> (x!=<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        t.modify(root[x],<span class="number">1</span>,DFN[x],DFN[x],<span class="number">1</span>,idx,M),ans=min(ans,d[x]+t.mi[root[x]]),t.modify(root[x],<span class="number">1</span>,DFN[x],DFN[x],<span class="number">1</span>,idx,-M);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=last[x],y;i;i=nxt[i])</div><div class="line">            <span class="keyword">if</span> ((y=tov[i])!=fa[x]) ans=min(ans,d[x]-d[y]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    tot=cnt=<span class="number">0</span>,<span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span> last),<span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span> head),<span class="built_in">memset</span>(nxt,<span class="number">0</span>,<span class="keyword">sizeof</span> nxt),<span class="built_in">memset</span>(stp,<span class="number">0</span>,<span class="keyword">sizeof</span> stp);</div><div class="line">    <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d),<span class="built_in">memset</span>(hea,<span class="number">0</span>,<span class="keyword">sizeof</span> hea),<span class="built_in">memset</span>(root,<span class="number">0</span>,<span class="keyword">sizeof</span> root);</div><div class="line">    <span class="keyword">for</span> (;!t.avl.empty();t.avl.pop());</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;S;++i) t.avl.push(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    freopen(<span class="string">"mincutcut.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>),freopen(<span class="string">"mincutcut.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">for</span> (T=read();T--;)</div><div class="line">    &#123;</div><div class="line">        clear(),n=read(),m=read();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;++i) x=read(),y=read(),insert(x,y),insert(y,x);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=m-n+<span class="number">1</span>;++i) ++d[x=read()],++d[y=read()],hang(x,y),hang(y,x);</div><div class="line">        fa[<span class="number">1</span>]=<span class="number">0</span>,dfs(<span class="number">1</span>),idx=<span class="number">0</span>,HLD(<span class="number">1</span>,<span class="number">1</span>),build(<span class="number">1</span>,<span class="number">1</span>,n),t.mi[<span class="number">0</span>]=ans=m+<span class="number">1</span>,calc(<span class="number">1</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,++cas,ans+<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    fclose(<span class="built_in">stdin</span>),fclose(<span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h1&gt;&lt;p&gt;给定一颗$n$个节点的无根树，除此之外还给定一些非树边$(x,y)$。&lt;br&gt;这些非树边比较特殊，它们满足将树看成$1$为根的有根树的时候，$lca(x,y)=1$。&lt;br&gt;树边和非树边的数量之和是$m$。&lt;br&gt;要求求出&lt;strong&gt;恰好&lt;/strong&gt;删除两条树边的一个最小的割。&lt;/p&gt;
&lt;p&gt;$3\leq n\leq 2\times10^4,n-1\leq m\leq 10^5$&lt;br&gt;
    
    </summary>
    
      <category term="解题报告" scheme="http://yoursite.com/categories/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="HDOJ" scheme="http://yoursite.com/tags/HDOJ/"/>
    
      <category term="线段树合并" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/"/>
    
      <category term="树链剖分" scheme="http://yoursite.com/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="http://yoursite.com/2017/10/01/my-first-blog/"/>
    <id>http://yoursite.com/2017/10/01/my-first-blog/</id>
    <published>2017-09-30T16:00:00.000Z</published>
    <updated>2017-11-02T14:14:38.575Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了一个下午总算用Hexo+GitHub Page搭了一个博客<br><a id="more"></a><br>一直都觉得在各种博客平台上写blog和拘束，更何况最近csdn出了一个怪丑的皮肤。现在总算有了一个自由度比较高的站。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了一个下午总算用Hexo+GitHub Page搭了一个博客&lt;br&gt;
    
    </summary>
    
      <category term="公告" scheme="http://yoursite.com/categories/%E5%85%AC%E5%91%8A/"/>
    
    
      <category term="公告" scheme="http://yoursite.com/tags/%E5%85%AC%E5%91%8A/"/>
    
      <category term="杂文" scheme="http://yoursite.com/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
</feed>
